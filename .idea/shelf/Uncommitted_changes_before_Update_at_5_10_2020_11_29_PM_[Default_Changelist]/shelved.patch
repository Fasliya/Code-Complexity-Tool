Index: .idea/dataSources.local.xml
===================================================================
--- .idea/dataSources.local.xml	(revision c6365f07a658f361c9f2c0deb40780062e97a16e)
+++ .idea/dataSources.local.xml	(revision c6365f07a658f361c9f2c0deb40780062e97a16e)
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="dataSourceStorageLocal">
-    <data-source name="weightcomplexity@localhost" uuid="ade8e5f1-61b9-4fcf-a624-3a9056071675">
-      <database-info product="MySQL" version="8.0.18" jdbc-version="4.2" driver-name="MySQL Connector/J" driver-version="mysql-connector-java-8.0.15 (Revision: 79a4336f140499bd22dd07f02b708e163844e3d5)" dbms="MYSQL" exact-version="8.0.18" exact-driver-version="8.0">
-        <extra-name-characters>#@</extra-name-characters>
-        <identifier-quote-string>`</identifier-quote-string>
-      </database-info>
-      <case-sensitivity plain-identifiers="lower" quoted-identifiers="lower" />
-      <secret-storage>master_key</secret-storage>
-      <user-name>root</user-name>
-      <schema-mapping>
-        <introspection-scope>
-          <node kind="schema" qname="@" />
-        </introspection-scope>
-      </schema-mapping>
-    </data-source>
-  </component>
-</project>
\ No newline at end of file
Index: inheritance.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nif (!isset($_GET['reload'])) {\r\n    echo '<meta http-equiv=Refresh content=\"0;url=inheritance.php?reload=1\">';\r\n}\r\n\r\n?>\r\n\r\n<?php include 'include/header.php'; ?>\r\n<?php include 'include/aside.php'; ?>\r\n\r\n<?php\r\n//function to sort the class_name using getBetween function\r\nfunction getBetween($codeLine, $start, $end)\r\n{\r\n    $codeLine = \" \" . $codeLine;\r\n    $ini = strpos($codeLine, $start);\r\n    if ($ini == 0)\r\n        return \" \";\r\n    $ini += strlen($start);\r\n    $len = strpos($codeLine, $end, $ini) - $ini;\r\n    return substr($codeLine, $ini, $len);\r\n}\r\n//To sort out the classes\r\nclass inheri\r\n{\r\n    public $name;\r\n    public $indirect;\r\n    public $superClass;\r\n    function __construct()\r\n    {\r\n        $this->name = \"\";\r\n        $this->indirect = 0;\r\n        $this->superClass = null;\r\n    }\r\n    function set_name($name)\r\n    {\r\n        $this->name = $name;\r\n    }\r\n    function set_indirect($indirect)\r\n    {\r\n        $this->indirect = $indirect;\r\n    }\r\n    function set_extends($var)\r\n    {\r\n        $this->superClass = $var;\r\n    }\r\n    function get_extends()\r\n    {\r\n        return $this->superClass;\r\n    }\r\n    function get_name()\r\n    {\r\n        return $this->name;\r\n    }\r\n    function get_direct()\r\n    {\r\n        if (is_string($this->superClass)) {\r\n            $ix = 1;\r\n        } else {\r\n            $ix = 0;\r\n        }\r\n        return $ix;\r\n    }\r\n    function get_indirect()\r\n    {\r\n        return $this->indirect;\r\n    }\r\n}\r\n//Function to find NIDI\r\nfunction findNidi($extend)\r\n{\r\n    global $classes;\r\n    global $cnt;\r\n    foreach ($classes as $key) {\r\n        if ($key->get_name() == $extend) {\r\n            $name1 = $key->get_extends();\r\n            if (!empty($name1)) {\r\n                $cnt++;\r\n                findNidi($name1);\r\n            }\r\n        }\r\n    }\r\n}\r\n?>\r\n\r\n<?php\r\n\r\n$ds = DIRECTORY_SEPARATOR;  // Store directory separator (DIRECTORY_SEPARATOR) to a simple variable. This is just a personal preference as we hate to type long variable name.\r\n$storeFolder = 'uploads';   // Declare a variable for destination folder.\r\n\r\n$tempFile = $_FILES['file']['tmp_name'];        // If file is sent to the page, store the file object to a temporary variable.\r\n$targetPath = __DIR__ . $ds . $storeFolder . $ds;  // Create the absolute path of the destination folder.\r\n\r\n$newFileName = $_FILES['file']['name'];\r\n$targetFile = $targetPath . $newFileName;  // Create the absolute path of the uploaded file destination.\r\nmove_uploaded_file($tempFile, $targetFile); // Move uploaded file to destination.\r\n\r\n// Include and initialize Extractor class (Zip file extracting)\r\nrequire 'Extractor.class.php';\r\n$extractor = new Extractor;\r\n\r\n// Path of archive file\r\n$archivePath = $targetFile;\r\n\r\n// Destination path\r\n$destPath = $storeFolder;\r\n\r\n// Extract archive file\r\n$extract = $extractor->extract($archivePath, $storeFolder);\r\n\r\n$dir_name = $storeFolder;\r\n$ext = 'zip';\r\n\r\nif ($extract) {\r\n    echo $GLOBALS['status']['success'];\r\n    unlink_recursive($dir_name, $ext);\r\n\r\n} else {\r\n    echo $GLOBALS['status']['error'];\r\n}\r\n\r\n\r\nif ($handle = opendir('uploads')) {\r\n\r\n    while (false !== ($entry = readdir($handle))) {\r\n        if ($entry != \".\" && $entry != \"..\") {\r\n\r\n            $entry_arr_af = preg_split(\"/\\.java/\", $entry);\r\n            $entry_arr = array_filter($entry_arr_af);\r\n\r\n            foreach ($entry_arr\r\n\r\n                     as $files) {\r\n\r\n                $content = file_get_contents('uploads/' . $entry);\r\n\r\n//  Removes single line '//' comments, treats blank characters\r\n                $single = preg_replace('![ \\t]*//.*[ \\t]*[\\r\\n]!', '', $content);\r\n\r\n                $multiple = preg_replace('#/\\*[^*]*\\*+([^/][^*]*\\*+)*/#', '', $single);\r\n                $excess = preg_replace('/\\s+/', ' ', $multiple);\r\n                $trim = trim($excess, \" \");\r\n//$for_semicolon = preg_replace('/;(?=((?!\\().)*?\\))/', ';', $trim);\r\n                $for_semicolon = preg_replace_callback(/** @lang text */ '~\\b(?:while|for)\\s*(\\((?:[^()]++|(?1))*\\))~u', static function ($m) {\r\n                    return str_replace(';', ';', $m[0]);\r\n                },\r\n                    $trim);\r\n                $split = preg_split('/(?<=[;{}])/', $for_semicolon, 0, PREG_SPLIT_NO_EMPTY);\r\n\r\n                $_SESSION['split_code'] = $split;\r\n                $_SESSION['files'] = $entry;\r\n                $_SESSION['trimmed'] = $trim;\r\n                $_SESSION['entireCode'] = $trim;\r\n                $_SESSION['filename'] = $entry;\r\n\r\n\r\n                ?>\r\n\r\n\r\n                <div class=\"kt-content kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor\" id=\"kt_content\">\r\n\r\n                <!-- begin:: Content Head -->\r\n                <div class=\"kt-subheader  kt-grid__item\" id=\"kt_subheader\">\r\n                    <div class=\"kt-container  kt-container--fluid \">\r\n                        <div class=\"kt-subheader__main\">\r\n                            <h3 class=\"kt-subheader__title\">Inheritance Complexity of the Program</h3>\r\n                            <span class=\"kt-subheader__separator kt-subheader__separator--v\"></span>\r\n\r\n\r\n                            <div class=\"kt-input-icon kt-input-icon--right kt-subheader__search kt-hidden\">\r\n                                <input type=\"text\" class=\"form-control\" placeholder=\"Search order...\" id=\"generalSearch\">\r\n                                <span class=\"kt-input-icon__icon kt-input-icon__icon--right\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span><i class=\"flaticon2-search-1\"></i></span>\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"kt-subheader__toolbar\">\r\n                            <a href=\"total_weight.php\" class=\"btn btn-label-warning btn-bold btn-sm btn-icon-h kt-margin-l-10\">\r\n                                Total Weight of the Program\r\n                            </a>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- end:: Content Head -->\r\n                <?php\r\n\r\n\r\n\r\n                $entry_arr_af = preg_split(\"/\\.java/\", $entry);\r\n                $entry_arr = array_filter($entry_arr_af);\r\n\r\n                foreach ($entry_arr as $files_arr) {\r\n\r\n                    $fi = new FilesystemIterator($storeFolder, FilesystemIterator::SKIP_DOTS);\r\n                    $limit = (iterator_count($fi));\r\n\r\n                    $lastRow = \"SELECT * FROM ( SELECT * FROM ci ORDER BY CiID DESC LIMIT $limit) result ORDER BY CiID ASC\";\r\n                    $run_query_last = mysqli_query($con,$lastRow);\r\n\r\n                    \r\n                    while ($lastrow = mysqli_fetch_assoc($run_query_last)) {\r\n                        $CiID_last = $lastrow['CiID'];\r\n                        $CiValue_last = $lastrow['CiValue'];\r\n\r\n                        ?>\r\n                        <!-- begin:: Content -->\r\n                        <div class=\"kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid\">\r\n                            <!--Begin::Dashboard 3-->\r\n                            <!--Begin::Row-->\r\n                            <div class=\"row\">\r\n\r\n\r\n                                <div class=\"col-lg-12\">\r\n\r\n\r\n                                    <!--begin::Portlet-->\r\n                                    <div style=\"background-color: #F4F7FF;\" class=\"kt-portlet kt-portlet--skin-solid kt-portlet--\">\r\n                                        <div class=\"kt-portlet__head\">\r\n                                            <div class=\"kt-portlet__head-label\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"kt-portlet__head-icon kt-font-brand\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i class=\"flaticon-time-1\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n                                                <h3 class=\"kt-portlet__head-title kt-font-brand\">\r\n                                                    Complexity of the Program due to Inheritance\r\n                                                </h3>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                        <div class=\"kt-portlet__body kt-font-brand\">\r\n\r\n\r\n                                            <div class=\"row\">\r\n\r\n                                                <div class=\"col-lg-12\">\r\n                                                    <div class=\"kt-portlet kt-iconbox kt-iconbox--brand kt-iconbox--animate-slower\">\r\n                                                        <div class=\"kt-portlet__body\">\r\n                                                            <div class=\"kt-iconbox__body\">\r\n                                                                <div class=\"kt-iconbox__icon\">\r\n                                                                    <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                                         xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"24px\"\r\n                                                                         height=\"24px\" viewBox=\"0 0 24 24\" version=\"1.1\"\r\n                                                                         class=\"kt-svg-icon\">\r\n                                                                        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\r\n                                                                            <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\"/>\r\n                                                                            <path d=\"M2.56066017,10.6819805 L4.68198052,8.56066017 C5.26776695,7.97487373 6.21751442,7.97487373 6.80330086,8.56066017 L8.9246212,10.6819805 C9.51040764,11.267767 9.51040764,12.2175144 8.9246212,12.8033009 L6.80330086,14.9246212 C6.21751442,15.5104076 5.26776695,15.5104076 4.68198052,14.9246212 L2.56066017,12.8033009 C1.97487373,12.2175144 1.97487373,11.267767 2.56066017,10.6819805 Z M14.5606602,10.6819805 L16.6819805,8.56066017 C17.267767,7.97487373 18.2175144,7.97487373 18.8033009,8.56066017 L20.9246212,10.6819805 C21.5104076,11.267767 21.5104076,12.2175144 20.9246212,12.8033009 L18.8033009,14.9246212 C18.2175144,15.5104076 17.267767,15.5104076 16.6819805,14.9246212 L14.5606602,12.8033009 C13.9748737,12.2175144 13.9748737,11.267767 14.5606602,10.6819805 Z\"\r\n                                                                                  fill=\"#000000\" opacity=\"0.3\"/>\r\n                                                                            <path d=\"M8.56066017,16.6819805 L10.6819805,14.5606602 C11.267767,13.9748737 12.2175144,13.9748737 12.8033009,14.5606602 L14.9246212,16.6819805 C15.5104076,17.267767 15.5104076,18.2175144 14.9246212,18.8033009 L12.8033009,20.9246212 C12.2175144,21.5104076 11.267767,21.5104076 10.6819805,20.9246212 L8.56066017,18.8033009 C7.97487373,18.2175144 7.97487373,17.267767 8.56066017,16.6819805 Z M8.56066017,4.68198052 L10.6819805,2.56066017 C11.267767,1.97487373 12.2175144,1.97487373 12.8033009,2.56066017 L14.9246212,4.68198052 C15.5104076,5.26776695 15.5104076,6.21751442 14.9246212,6.80330086 L12.8033009,8.9246212 C12.2175144,9.51040764 11.267767,9.51040764 10.6819805,8.9246212 L8.56066017,6.80330086 C7.97487373,6.21751442 7.97487373,5.26776695 8.56066017,4.68198052 Z\"\r\n                                                                                  fill=\"#000000\"/>\r\n                                                                        </g>\r\n                                                                    </svg>\r\n                                                                </div>\r\n                                                                <div class=\"col-lg-12\">\r\n                                                                    <div class=\"kt-iconbox__desc kt-font-brand\">\r\n\r\n                                                                        <center><h1 style=\"font-family: 'Fira Code'\">Ci\r\n                                                                                : <?php echo $CiValue_last ?>\r\n\r\n\r\n                                                                            </h1></center>\r\n\r\n\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n\r\n                                            </div>\r\n\r\n\r\n\r\n\r\n                                            <div class=\"kt-portlet__foot\">\r\n                                                <div class=\"kt-form__actions\">\r\n                                                    <div class=\"row\">\r\n\r\n\r\n                                                        <!-- begin:: Content -->\r\n                                                        <div class=\"kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid\">\r\n\r\n                                                            <div class=\"kt-portlet kt-portlet--mobile\">\r\n                                                                <div class=\"kt-portlet__head kt-portlet__head--lg\">\r\n                                                                    <div class=\"kt-portlet__head-label\">\r\n\t\t\t\t\t\t\t\t\t\t<span class=\"kt-portlet__head-icon\">\r\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"kt-font-brand flaticon2-line-chart\"></i>\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n                                                                        <h3 class=\"kt-portlet__head-title kt-font-brand\">\r\n                                                                            Complexity of the Program due to the Inheritance by Statement\r\n                                                                            : </h3>&nbsp;\r\n                                                                        <h3 class=\"kt-portlet__head-title kt-font-dark\"><?php echo $entry; ?>\r\n                                                                        </h3>\r\n                                                                    </div>\r\n                                                                    <div class=\"kt-portlet__head-toolbar\">\r\n                                                                        <div class=\"kt-portlet__head-wrapper\">\r\n                                                                            <div class=\"kt-portlet__head-actions\">\r\n                                                                                <div class=\"dropdown dropdown-inline\">\r\n                                                                                    <button type=\"button\"\r\n                                                                                            class=\"btn btn-default btn-icon-sm dropdown-toggle\"\r\n                                                                                            data-toggle=\"dropdown\" aria-haspopup=\"true\"\r\n                                                                                            aria-expanded=\"false\">\r\n                                                                                        <i class=\"la la-download\"></i> Export\r\n                                                                                    </button>\r\n                                                                                    <div class=\"dropdown-menu dropdown-menu-right\">\r\n                                                                                        <ul class=\"kt-nav\">\r\n                                                                                            <li class=\"kt-nav__section kt-nav__section--first\">\r\n                                                                                                <span class=\"kt-nav__section-text\">Choose an option</span>\r\n                                                                                            </li>\r\n                                                                                            <li class=\"kt-nav__item\">\r\n                                                                                                <a href=\"#\" class=\"kt-nav__link\">\r\n                                                                                                    <i class=\"kt-nav__link-icon la la-print\"></i>\r\n                                                                                                    <span class=\"kt-nav__link-text\">Print</span>\r\n                                                                                                </a>\r\n                                                                                            </li>\r\n                                                                                            <li class=\"kt-nav__item\">\r\n                                                                                                <a href=\"#\" class=\"kt-nav__link\">\r\n                                                                                                    <i class=\"kt-nav__link-icon la la-copy\"></i>\r\n                                                                                                    <span class=\"kt-nav__link-text\">Copy</span>\r\n                                                                                                </a>\r\n                                                                                            </li>\r\n                                                                                            <li class=\"kt-nav__item\">\r\n                                                                                                <a href=\"#\" class=\"kt-nav__link\">\r\n                                                                                                    <i class=\"kt-nav__link-icon la la-file-excel-o\"></i>\r\n                                                                                                    <span class=\"kt-nav__link-text\">Excel</span>\r\n                                                                                                </a>\r\n                                                                                            </li>\r\n                                                                                            <li class=\"kt-nav__item\">\r\n                                                                                                <a href=\"#\" class=\"kt-nav__link\">\r\n                                                                                                    <i class=\"kt-nav__link-icon la la-file-text-o\"></i>\r\n                                                                                                    <span class=\"kt-nav__link-text\">CSV</span>\r\n                                                                                                </a>\r\n                                                                                            </li>\r\n                                                                                            <li class=\"kt-nav__item\">\r\n                                                                                                <a href=\"#\" class=\"kt-nav__link\">\r\n                                                                                                    <i class=\"kt-nav__link-icon la la-file-pdf-o\"></i>\r\n                                                                                                    <span class=\"kt-nav__link-text\">PDF</span>\r\n                                                                                                </a>\r\n                                                                                            </li>\r\n                                                                                        </ul>\r\n                                                                                    </div>\r\n                                                                                </div>\r\n\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n\r\n                                                                <div class=\"kt-portlet__body kt-font-dark\">\r\n                                                                    <!--begin: Datatable -->\r\n                                                                    <table style=\"font-family: 'Fira Code'; text-align: center\"\r\n                                                                           class=\"table table-striped- table-bordered table-hover\"\r\n                                                                           id=\"kt_table_1\">\r\n                                                                        <thead>\r\n                                                                        <tr class=\"kt-label-bg-color-1\"\r\n                                                                            style=\"font-family: 'Fira Code Medium'\">\r\n                                                                            <th>Count</th>\r\n                                                                            <th>Class Name</th>\r\n                                                                            <th>No. of direct inheritances</th>\r\n                                                                            <th>No. of indirect inheritances</th>\r\n                                                                            <th>Total inheritances</th>\r\n                                                                            <th style=\"color: white\" class=\"kt-label-bg-color-2\">Ci</th>\r\n\r\n                                                                        </tr>\r\n                                                                        </thead>\r\n                                                                        <tbody>\r\n                                                                        <?php\r\n\r\n                                                                       /* $i = 0; //increment to each loop\r\n                                                                        $count = 0;\r\n                                                                        $total_cs = 0;\r\n\r\n                                                                       $Nkw = 0;\r\n                                                                       $Nid = 0;\r\n                                                                        $Nop = 0;\r\n                                                                        $Nnv = 0;\r\n                                                                        $Nsl = 0;\r\n                                                                        $Cs = 0;*/\r\n\r\n                                                                        $lastRow = \"SELECT * FROM inheritance ORDER BY InheritanceID DESC LIMIT 1\";\r\n                                                                        $run_query_last = mysqli_query($con, $lastRow);\r\n\r\n                                                                        while ($lastrow = mysqli_fetch_assoc($run_query_last)) {\r\n                                                                        $InheritanceID_last = $lastrow['InheritanceID'];\r\n                                                                        $NoInheritance_last = $lastrow['NoInheritance'];\r\n                                                                        $OneUserDefined_last = $lastrow['One'];\r\n                                                                        $TwoUserDefined_last = $lastrow['Two'];\r\n                                                                        $ThreeUserDefined_last = $lastrow['Three'];\r\n                                                                        $MoreUserDefined_last = $lastrow['MoreThree'];\r\n\r\n\r\n                                                                        $i = 0;  //increment to each loop\r\n                                                                        $line_count = 0;\r\n                                                                        $count = 0;\r\n                                                                        $count2 = 0;\r\n                                                                        $total_ci = 0;\r\n\r\n                                                                        //Default weights\r\n                                                                        global $weight_no_ud_class;\r\n                                                                        $weight_no_ud_class = $NoInheritance_last;\r\n                                                                        $weight_one_ud_class = $OneUserDefined_last;\r\n                                                                        $weight_two_ud_class = $TwoUserDefined_last;\r\n                                                                        $weight_three_ud_class = $ThreeUserDefined_last;\r\n                                                                        $weight_more_ud_class = $MoreUserDefined_last;\r\n\r\n\r\n\r\n\r\n\r\n                                                                        // sorting classes end\r\n                                                                        $count = 0;\r\n                                                                        $classes = [];  //array to store class objects\r\n                                                                        $inClasses = false;\r\n                                                                        $parsed1 = null;\r\n                                                                        $parsed1=null;\r\n                                                                        $parsed2=null;\r\n                                                                        $pos=null;\r\n                                                                        $pos1=null;\r\n                                                                        $indirect = 0;\r\n                                                                        $tot_inheritance = 0;\r\n\r\n\r\n\r\n\r\n\r\n                                                                        foreach ($split\r\n\r\n                                                                        as $val) { // Traverse the array with FOREACH\r\n\r\n                                                                        $direct = 0;\r\n                                                                        $indirect = 0;\r\n                                                                        $tot_inheritance = 0;\r\n                                                                        $ci = 0;\r\n\r\n                                                                        //Calling the two functions of getBetween to sort the class_names\r\n                                                                        $val;\r\n                                                                        $arr = $val;\r\n\r\n                                                                        // $parent_class = $parsed;\r\n                                                                        // $child_class = $parsed1;\r\n                                                                        // $found_parent = $parsed2;\r\n                                                                        $parsed = getBetween($arr, \"class\", \"{\");\r\n\r\n                                                                        $parsed1 = getBetween($arr, \"class\", \"extends\");\r\n\r\n                                                                        $parsed2 = getBetween($arr, \"extends\", \"{\");\r\n\r\n                                                                        //pos_extends = pos;\r\n                                                                        //pos_class = pos1;\r\n\r\n                                                                        $word_1 = 'extends';\r\n                                                                        $pos = strpos($arr, $word_1);\r\n\r\n                                                                        $word_2 = \"class\";\r\n                                                                        $pos1 = strpos($arr, $word_2);\r\n\r\n                                                                        $pos2 = strpos($arr, $parsed2);\r\n\r\n\r\n                                                                        // $pos1 = strpos($arr, $parsed);\r\n\r\n                                                                        /*Aruni--------\r\n                                                    if ($pos == true && $parsed1 == true) {\r\n\r\n                                                        $direct++;   //direct inheritance\r\n                                                        $pr = $parsed1;\r\n\r\n\r\n                                                    } elseif ($pos == true) {\r\n\r\n                                                        $direct++;   //direct inheritance\r\n                                                        $pr = $parsed1;\r\n\r\n\r\n                                                    } else {\r\n\r\n                                                        //echo  $parsed ;\r\n                                                        $pr = $parsed;\r\n                                                    }\r\n\r\n                                                    ++$count2;\r\n                                                    if ($count2 == '25') {\r\n                                                        ++$indirect; //indirect inheritance\r\n                                                    }\r\n\r\n\r\n                                                    // Direct + Indirect;\r\n                                                    $tot_inheritance = $direct + $indirect;  //total inheritance\r\n\r\n                                                    $ci = $tot_inheritance;\r\n\r\n                                                    $total_ci += $ci;\r\n                                                    Aruni ends*/\r\n                                                                           // $direct = 0;\r\n                                                                           // $indirect = 0;\r\n                                                                            //To check the classes and push classes as objects into an array\r\n                                                                            if (is_integer($pos1)) {\r\n\r\n\r\n\r\n                                                                                if (is_integer($pos)&& is_string($parsed1)) {\r\n                                                                                    $p = $parsed1 ;\r\n\r\n                                                                                }\r\n                                                                                elseif(is_integer($pos) && is_string($parsed)){\r\n                                                                                    $p = $parsed;\r\n                                                                                }\r\n\r\n                                                                                else if(is_integer($pos1)&& is_string($parsed)){\r\n                                                                                    $p = $parsed ;\r\n\r\n                                                                                }\r\n\r\n                                                                                $className = $p;\r\n\r\n                                                                                foreach ($classes as $key) {\r\n                                                                                    if ($key->get_name() == $className) {\r\n                                                                                        $inClasses = true;\r\n                                                                                    }\r\n                                                                                }\r\n\r\n                                                                                if (!$inClasses) {\r\n\r\n                                                                                    $classObj = new inheri;\r\n                                                                                    $classObj->set_name($className);\r\n\r\n                                                                                    array_push($classes, $classObj);\r\n                                                                                }\r\n\r\n\r\n                                                                                if ($pos == true && is_string($parsed1)) {\r\n                                                                                    foreach ($classes as $key) {\r\n                                                                                        if ($key->get_name() == $parsed1) {\r\n                                                                                            $key->set_extends($parsed2);\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }\r\n                                                                                //pushing ends\r\n\r\n                                                                               // $ci = $tot_inheritance;\r\n\r\n                                                                            }\r\n                                                                        }\r\n\r\n                                                                            $i = 0;\r\n                                                                            $cnt = 0;\r\n\r\n                                                                            //Call NIDI function recursively and set NIDI of the class object\r\n                                                                            foreach ($classes as $key) {\r\n                                                                                $firstName = $key->get_name();\r\n                                                                                $name = $key->get_extends();\r\n                                                                                if (!empty($name)) {\r\n                                                                                    $cnt ++;\r\n                                                                                    findNidi($name);\r\n                                                                                    $key->set_indirect($cnt-1);\r\n                                                                                }\r\n\r\n                                                                            }\r\n\r\n\r\n\r\n\r\n                                                                        ?>\r\n\r\n                                                                        <?php\r\n                                                                        foreach ($classes as $key) {\r\n                                                                        $tot_inheritance = $key->get_direct() * $weight_one_ud_class + $key->get_indirect();\r\n                                                                        $i++;\r\n\r\n                                                                        if ($tot_inheritance <=3 ){\r\n                                                                            $ci = $tot_inheritance;\r\n                                                                        }else{\r\n                                                                            $ci = 4;\r\n                                                                        }\r\n                                                                        $total_ci = $total_ci + $ci;\r\n\r\n\r\n                                                                        ?>\r\n\r\n                                                                            <tr>\r\n                                                                            <td><?php echo $i ; ?></td>\r\n                                                                            <td style=\"text-align: left\"><?php\r\n                                                                                echo $key->get_name();\r\n                                                                                ?></td>\r\n                                                                            <td><?php echo $key->get_direct() * $weight_one_ud_class; ?></td>\r\n                                                                            <td><?php echo $key->get_indirect(); ?></td>\r\n                                                                            <td><?php echo $tot_inheritance; ?></td>\r\n                                                                            <td><?php echo $ci; ?></td>\r\n\r\n\r\n                                                                        <?php } ?>\r\n\r\n                                                                            <?php\r\n\r\n                                                                            $i++;\r\n\r\n\r\n\r\n\r\n\r\n                                                                            }\r\n\r\n                                                                            $_SESSION['total_ci'] = $total_ci;\r\n\r\n                                                                            $query_disp_total = \"INSERT INTO ci(CiValue) VALUES('$total_ci')\";\r\n                                                                            mysqli_query($con, $query_disp_total);\r\n\r\n                                                                            ?>\r\n                                                                        </tr>\r\n\r\n\r\n                                                                        </tbody>\r\n\r\n                                                                    </table>\r\n\r\n                                                                    <!--end: Datatable -->\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n\r\n\r\n                                                        <!-- end:: Content -->\r\n                                                    </div>\r\n                                                </div>\r\n\r\n\r\n                                            </div>\r\n\r\n                                            <div class=\"kt-portlet__foot\">\r\n                                                <div class=\"kt-form__actions\">\r\n                                                    <div class=\"row\">\r\n\r\n\r\n                                                        <div class=\"col-lg-12 ml-lg-auto\">\r\n                                                            <center>\r\n\r\n                                                                <a href=\"total_weight.php\">\r\n                                                                    <button type=\"button\" href=\"total_weight.php\" class=\"btn btn-brand\">\r\n                                                                        <span><i class=\"flaticon-home\"></i></span> Total Complexity of the\r\n                                                                        Program\r\n                                                                    </button>\r\n                                                                </a>\r\n                                                            </center>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n\r\n                                    </div>\r\n                                    <!--end::Portlet-->\r\n\r\n\r\n                                </div>\r\n\r\n\r\n                                <!--End::Row-->\r\n                            </div>\r\n                            <!--End::Dashboard 3-->\r\n                        </div>\r\n                        <!-- end:: Content -->\r\n                        </div>\r\n                        <?php\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    closedir($handle);\r\n}\r\n\r\n\r\n\r\n?>\r\n\r\n<?php include 'include/footer.php'; ?>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- inheritance.php	(revision c6365f07a658f361c9f2c0deb40780062e97a16e)
+++ inheritance.php	(date 1589128226825)
@@ -177,7 +177,7 @@
                         </div>
                         <div class="kt-subheader__toolbar">
                             <a href="total_weight.php" class="btn btn-label-warning btn-bold btn-sm btn-icon-h kt-margin-l-10">
-                                Total Weight of the Program
+                                Total Complexity of the Program
                             </a>
 
                         </div>
@@ -681,4 +681,4 @@
 
 ?>
 
-<?php include 'include/footer.php'; ?>
\ No newline at end of file
+<?php include 'include/footer.php'; ?>
Index: .idea/dataSources.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DataSourceManagerImpl\" format=\"xml\" multifile-model=\"true\">\r\n    <data-source source=\"LOCAL\" name=\"weightcomplexity@localhost\" uuid=\"ade8e5f1-61b9-4fcf-a624-3a9056071675\">\r\n      <driver-ref>mysql.8</driver-ref>\r\n      <synchronize>true</synchronize>\r\n      <jdbc-driver>com.mysql.cj.jdbc.Driver</jdbc-driver>\r\n      <jdbc-url>jdbc:mysql://localhost:3308/weightcomplexity</jdbc-url>\r\n    </data-source>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/dataSources.xml	(revision c6365f07a658f361c9f2c0deb40780062e97a16e)
+++ .idea/dataSources.xml	(date 1589128226855)
@@ -1,11 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="DataSourceManagerImpl" format="xml" multifile-model="true">
-    <data-source source="LOCAL" name="weightcomplexity@localhost" uuid="ade8e5f1-61b9-4fcf-a624-3a9056071675">
+    <data-source source="LOCAL" name="weightcomplexity@localhost" uuid="c11a078a-d61d-40ff-bc85-e850ce02fa4f">
       <driver-ref>mysql.8</driver-ref>
       <synchronize>true</synchronize>
       <jdbc-driver>com.mysql.cj.jdbc.Driver</jdbc-driver>
       <jdbc-url>jdbc:mysql://localhost:3308/weightcomplexity</jdbc-url>
     </data-source>
   </component>
-</project>
\ No newline at end of file
+</project>
Index: include/inheritance_total.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- include/inheritance_total.php	(date 1589133560312)
+++ include/inheritance_total.php	(date 1589133560312)
@@ -0,0 +1,297 @@
+<?php
+
+$ds = DIRECTORY_SEPARATOR;  // Store directory separator (DIRECTORY_SEPARATOR) to a simple variable. This is just a personal preference as we hate to type long variable name.
+$storeFolder = 'uploads';   // Declare a variable for destination folder.
+
+$tempFile = $_FILES['file']['tmp_name'];        // If file is sent to the page, store the file object to a temporary variable.
+$targetPath = __DIR__ . $ds . $storeFolder . $ds;  // Create the absolute path of the destination folder.
+
+$newFileName = $_FILES['file']['name'];
+$targetFile = $targetPath . $newFileName;  // Create the absolute path of the uploaded file destination.
+move_uploaded_file($tempFile, $targetFile); // Move uploaded file to destination.
+
+// Include and initialize Extractor class (Zip file extracting)
+require 'Extractor.class.php';
+$extractor = new Extractor;
+
+// Path of archive file
+$archivePath = $targetFile;
+
+// Destination path
+$destPath = $storeFolder;
+
+// Extract archive file
+$extract = $extractor->extract($archivePath, $storeFolder);
+
+$dir_name = $storeFolder;
+$ext = 'zip';
+
+if ($extract) {
+    echo $GLOBALS['status']['success'];
+    unlink_recursive($dir_name, $ext);
+
+} else {
+    echo $GLOBALS['status']['error'];
+}
+
+
+if ($handle = opendir('uploads')) {
+
+    while (false !== ($entry = readdir($handle))) {
+        if ($entry != "." && $entry != "..") {
+
+            $entry_arr_af = preg_split("/\.java/", $entry);
+            $entry_arr = array_filter($entry_arr_af);
+
+            foreach ($entry_arr
+
+                     as $files) {
+
+                $content = file_get_contents('uploads/' . $entry);
+
+//  Removes single line '//' comments, treats blank characters
+                $single = preg_replace('![ \t]*//.*[ \t]*[\r\n]!', '', $content);
+
+                $multiple = preg_replace('#/\*[^*]*\*+([^/][^*]*\*+)*/#', '', $single);
+                $excess = preg_replace('/\s+/', ' ', $multiple);
+                $trim = trim($excess, " ");
+//$for_semicolon = preg_replace('/;(?=((?!\().)*?\))/', ';', $trim);
+                $for_semicolon = preg_replace_callback(/** @lang text */ '~\b(?:while|for)\s*(\((?:[^()]++|(?1))*\))~u', static function ($m) {
+                    return str_replace(';', ';', $m[0]);
+                },
+                    $trim);
+                $split = preg_split('/(?<=[;{}])/', $for_semicolon, 0, PREG_SPLIT_NO_EMPTY);
+
+                $_SESSION['split_code'] = $split;
+                $_SESSION['files'] = $entry;
+                $_SESSION['trimmed'] = $trim;
+                $_SESSION['entireCode'] = $trim;
+                $_SESSION['filename'] = $entry;
+
+                $entry_arr_af = preg_split("/\.java/", $entry);
+                $entry_arr = array_filter($entry_arr_af);
+
+                foreach ($entry_arr as $files_arr) {
+
+                    $fi = new FilesystemIterator($storeFolder, FilesystemIterator::SKIP_DOTS);
+                    $limit = (iterator_count($fi));
+
+                    $lastRow = "SELECT * FROM ( SELECT * FROM ci ORDER BY CiID DESC LIMIT $limit) result ORDER BY CiID ASC";
+                    $run_query_last = mysqli_query($con, $lastRow);
+
+
+                    while ($lastrow = mysqli_fetch_assoc($run_query_last)) {
+                        $CiID_last = $lastrow['CiID'];
+                        $CiValue_last = $lastrow['CiValue'];
+
+                        $lastRow = "SELECT * FROM inheritance ORDER BY InheritanceID DESC LIMIT 1";
+                        $run_query_last = mysqli_query($con, $lastRow);
+
+                        while ($lastrow = mysqli_fetch_assoc($run_query_last)) {
+                            $InheritanceID_last = $lastrow['InheritanceID'];
+                            $NoInheritance_last = $lastrow['NoInheritance'];
+                            $OneUserDefined_last = $lastrow['One'];
+                            $TwoUserDefined_last = $lastrow['Two'];
+                            $ThreeUserDefined_last = $lastrow['Three'];
+                            $MoreUserDefined_last = $lastrow['MoreThree'];
+
+
+                            $i = 0;  //increment to each loop
+                            $line_count = 0;
+                            $count = 0;
+                            $count2 = 0;
+                            $total_ci = 0;
+
+//Default weights
+                            global $weight_no_ud_class;
+                            $weight_no_ud_class = $NoInheritance_last;
+                            $weight_one_ud_class = $OneUserDefined_last;
+                            $weight_two_ud_class = $TwoUserDefined_last;
+                            $weight_three_ud_class = $ThreeUserDefined_last;
+                            $weight_more_ud_class = $MoreUserDefined_last;
+
+
+// sorting classes end
+                            $count = 0;
+                            $classes = [];  //array to store class objects
+                            $inClasses = false;
+                            $parsed1 = null;
+                            $parsed1 = null;
+                            $parsed2 = null;
+                            $pos = null;
+                            $pos1 = null;
+                            $indirect = 0;
+                            $tot_inheritance = 0;
+
+
+                            foreach ($split
+
+                                     as $val) { // Traverse the array with FOREACH
+
+                                $direct = 0;
+                                $indirect = 0;
+                                $tot_inheritance = 0;
+                                $ci = 0;
+
+                                //Calling the two functions of getBetween to sort the class_names
+                                $val;
+                                $arr = $val;
+
+                                // $parent_class = $parsed;
+                                // $child_class = $parsed1;
+                                // $found_parent = $parsed2;
+                                $parsed = getBetween($arr, "class", "{");
+
+                                $parsed1 = getBetween($arr, "class", "extends");
+
+                                $parsed2 = getBetween($arr, "extends", "{");
+
+                                //pos_extends = pos;
+                                //pos_class = pos1;
+
+                                $word_1 = 'extends';
+                                $pos = strpos($arr, $word_1);
+
+                                $word_2 = "class";
+                                $pos1 = strpos($arr, $word_2);
+
+                                $pos2 = strpos($arr, $parsed2);
+
+
+                                // $pos1 = strpos($arr, $parsed);
+
+                                /*Aruni--------
+                            if ($pos == true && $parsed1 == true) {
+
+                            $direct++;   //direct inheritance
+                            $pr = $parsed1;
+
+
+                            } elseif ($pos == true) {
+
+                            $direct++;   //direct inheritance
+                            $pr = $parsed1;
+
+
+                            } else {
+
+                            //echo  $parsed ;
+                            $pr = $parsed;
+                            }
+
+                            ++$count2;
+                            if ($count2 == '25') {
+                            ++$indirect; //indirect inheritance
+                            }
+
+
+                            // Direct + Indirect;
+                            $tot_inheritance = $direct + $indirect;  //total inheritance
+
+                            $ci = $tot_inheritance;
+
+                            $total_ci += $ci;
+                            Aruni ends*/
+                                // $direct = 0;
+                                // $indirect = 0;
+                                //To check the classes and push classes as objects into an array
+                                if (is_integer($pos1)) {
+
+
+                                    if (is_integer($pos) && is_string($parsed1)) {
+                                        $p = $parsed1;
+
+                                    } elseif (is_integer($pos) && is_string($parsed)) {
+                                        $p = $parsed;
+                                    } else if (is_integer($pos1) && is_string($parsed)) {
+                                        $p = $parsed;
+
+                                    }
+
+                                    $className = $p;
+
+                                    foreach ($classes as $key) {
+                                        if ($key->get_name() == $className) {
+                                            $inClasses = true;
+                                        }
+                                    }
+
+                                    if (!$inClasses) {
+
+                                        $classObj = new inheri;
+                                        $classObj->set_name($className);
+
+                                        array_push($classes, $classObj);
+                                    }
+
+
+                                    if ($pos == true && is_string($parsed1)) {
+                                        foreach ($classes as $key) {
+                                            if ($key->get_name() == $parsed1) {
+                                                $key->set_extends($parsed2);
+                                            }
+                                        }
+                                    }
+                                    //pushing ends
+
+                                    // $ci = $tot_inheritance;
+
+                                }
+                            }
+
+                            $i = 0;
+                            $cnt = 0;
+
+//Call NIDI function recursively and set NIDI of the class object
+                            foreach ($classes as $key) {
+                                $firstName = $key->get_name();
+                                $name = $key->get_extends();
+                                if (!empty($name)) {
+                                    $cnt++;
+                                    findNidi($name);
+                                    $key->set_indirect($cnt - 1);
+                                }
+
+                            }
+
+
+                            ?>
+
+                            <?php
+                            foreach ($classes as $key) {
+                                $tot_inheritance = $key->get_direct() * $weight_one_ud_class + $key->get_indirect();
+                                $i++;
+
+                                if ($tot_inheritance <= 3) {
+                                    $ci = $tot_inheritance;
+
+                                } else {
+                                    $ci = 4;
+
+                                }
+                                $total_ci = $total_ci + $ci;
+
+                                $query = "INSERT INTO methods(PrimitiveReturnType,CompositeReturnType,VoidReturnType,PrimitiveParameter,CompositeParameter) VALUES('$PrimitiveReturnType','$CompositeReturnType','$VoidReturnType','$PrimitiveParameter','$CompositeParameter')";
+
+                                $create_query = mysqli_query($con, $query);
+
+                            }
+
+
+
+                        }
+
+
+
+                    }
+
+                }
+            }
+
+        }
+    }
+    closedir($handle);
+}
+
+
+?>
Index: public/404.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- public/404.html	(date 1589128226869)
+++ public/404.html	(date 1589128226869)
@@ -0,0 +1,33 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1">
+    <title>Page Not Found</title>
+
+    <style media="screen">
+      body { background: #ECEFF1; color: rgba(0,0,0,0.87); font-family: Roboto, Helvetica, Arial, sans-serif; margin: 0; padding: 0; }
+      #message { background: white; max-width: 360px; margin: 100px auto 16px; padding: 32px 24px 16px; border-radius: 3px; }
+      #message h3 { color: #888; font-weight: normal; font-size: 16px; margin: 16px 0 12px; }
+      #message h2 { color: #ffa100; font-weight: bold; font-size: 16px; margin: 0 0 8px; }
+      #message h1 { font-size: 22px; font-weight: 300; color: rgba(0,0,0,0.6); margin: 0 0 16px;}
+      #message p { line-height: 140%; margin: 16px 0 24px; font-size: 14px; }
+      #message a { display: block; text-align: center; background: #039be5; text-transform: uppercase; text-decoration: none; color: white; padding: 16px; border-radius: 4px; }
+      #message, #message a { box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24); }
+      #load { color: rgba(0,0,0,0.4); text-align: center; font-size: 13px; }
+      @media (max-width: 600px) {
+        body, #message { margin-top: 0; background: white; box-shadow: none; }
+        body { border-top: 16px solid #ffa100; }
+      }
+    </style>
+  </head>
+  <body>
+    <div id="message">
+      <h2>404</h2>
+      <h1>Page Not Found</h1>
+      <p>The specified file was not found on this website. Please check the URL for mistakes and try again.</p>
+      <h3>Why am I seeing this?</h3>
+      <p>This page was generated by the Firebase Command-Line Interface. To modify it, edit the <code>404.html</code> file in your project's configured <code>public</code> directory.</p>
+    </div>
+  </body>
+</html>
Index: public/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- public/index.html	(date 1589128226862)
+++ public/index.html	(date 1589128226862)
@@ -0,0 +1,65 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1">
+    <title>Welcome to Firebase Hosting</title>
+
+    <!-- update the version number as needed -->
+    <script defer src="/__/firebase/7.14.3/firebase-app.js"></script>
+    <!-- include only the Firebase features as you need -->
+    <script defer src="/__/firebase/7.14.3/firebase-auth.js"></script>
+    <script defer src="/__/firebase/7.14.3/firebase-database.js"></script>
+    <script defer src="/__/firebase/7.14.3/firebase-messaging.js"></script>
+    <script defer src="/__/firebase/7.14.3/firebase-storage.js"></script>
+    <!-- initialize the SDK after all desired features are loaded -->
+    <script defer src="/__/firebase/init.js"></script>
+
+    <style media="screen">
+      body { background: #ECEFF1; color: rgba(0,0,0,0.87); font-family: Roboto, Helvetica, Arial, sans-serif; margin: 0; padding: 0; }
+      #message { background: white; max-width: 360px; margin: 100px auto 16px; padding: 32px 24px; border-radius: 3px; }
+      #message h2 { color: #ffa100; font-weight: bold; font-size: 16px; margin: 0 0 8px; }
+      #message h1 { font-size: 22px; font-weight: 300; color: rgba(0,0,0,0.6); margin: 0 0 16px;}
+      #message p { line-height: 140%; margin: 16px 0 24px; font-size: 14px; }
+      #message a { display: block; text-align: center; background: #039be5; text-transform: uppercase; text-decoration: none; color: white; padding: 16px; border-radius: 4px; }
+      #message, #message a { box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24); }
+      #load { color: rgba(0,0,0,0.4); text-align: center; font-size: 13px; }
+      @media (max-width: 600px) {
+        body, #message { margin-top: 0; background: white; box-shadow: none; }
+        body { border-top: 16px solid #ffa100; }
+      }
+    </style>
+  </head>
+  <body>
+    <div id="message">
+      <h2>Welcome</h2>
+      <h1>Firebase Hosting Setup Complete</h1>
+      <p>You're seeing this because you've successfully setup Firebase Hosting. Now it's time to go build something extraordinary!</p>
+      <a target="_blank" href="https://firebase.google.com/docs/hosting/">Open Hosting Documentation</a>
+    </div>
+    <p id="load">Firebase SDK Loading&hellip;</p>
+
+    <script>
+      document.addEventListener('DOMContentLoaded', function() {
+        // // 🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥
+        // // The Firebase SDK is initialized and available here!
+        //
+        // firebase.auth().onAuthStateChanged(user => { });
+        // firebase.database().ref('/path/to/ref').on('value', snapshot => { });
+        // firebase.messaging().requestPermission().then(() => { });
+        // firebase.storage().ref('/path/to/ref').getDownloadURL().then(() => { });
+        //
+        // // 🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥
+
+        try {
+          let app = firebase.app();
+          let features = ['auth', 'database', 'messaging', 'storage'].filter(feature => typeof app[feature] === 'function');
+          document.getElementById('load').innerHTML = `Firebase SDK loaded with ${features.join(', ')}`;
+        } catch (e) {
+          console.error(e);
+          document.getElementById('load').innerHTML = 'Error loading the Firebase SDK, check the console.';
+        }
+      });
+    </script>
+  </body>
+</html>
Index: include/total_weight_content.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"kt-content  kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor\" id=\"kt_content\">\r\n\r\n    <!-- begin:: Content Head -->\r\n    <div class=\"kt-subheader  kt-grid__item\" id=\"kt_subheader\">\r\n        <div class=\"kt-container  kt-container--fluid \">\r\n            <div class=\"kt-subheader__main\">\r\n                <h3 class=\"kt-subheader__title\">Total Weight of the Program</h3>\r\n                <span class=\"kt-subheader__separator kt-subheader__separator--v\"></span>\r\n\r\n\r\n                <div class=\"kt-input-icon kt-input-icon--right kt-subheader__search kt-hidden\">\r\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Search order...\" id=\"generalSearch\">\r\n                    <span class=\"kt-input-icon__icon kt-input-icon__icon--right\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span><i class=\"flaticon2-search-1\"></i></span>\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n                </div>\r\n            </div>\r\n            <div class=\"kt-subheader__toolbar\">\r\n\r\n                <div id=\"myNav\" class=\"overlay\">\r\n\r\n                    <div class=\"overlay-content\">\r\n                        <a href=\"javascript:void(0)\" class=\"closebtn\" onclick=\"closeNav()\"><i class=\"flaticon-cancel\"></i></a>\r\n                        <a class=\"text-warning\">Important !</a>\r\n                        <a class=\"text-white-50\">Open curly brace of a <b>method name</b> should be followed by a <b>whitespace</b> after the parentheses</a>\r\n                        <a class=\"text-white-50\" style=\"font-size: 20px\">Eg : <img style=\"width:20%;border-radius: 2px\" src=\"assets/media/bg/method.png\"></a>\r\n\r\n<br>\r\n                        <a class=\"text-white-50\">Open curly brace of a <b>class</b> should be followed by a <b>whitespace</b> after the name of the class</a>\r\n                        <a class=\"text-white-50\" style=\"font-size: 20px\">Eg : <img style=\"width:20%;border-radius: 2px\" src=\"assets/media/bg/class.png\"></a>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"button\" class=\"btn btn-warning\" onclick=\"openNav()\">This tool will work only under following Coding Conventions\r\n                </button>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- end:: Content Head -->\r\n    <?php\r\n\r\n    $total_CsValue = 0;\r\n\r\n    $entry_arr_af = preg_split(\"/\\.java/\", $entry);\r\n    $entry_arr = array_filter($entry_arr_af);\r\n\r\n    foreach ($entry_arr\r\n\r\n    as $files_arr) {\r\n\r\n\r\n    $fi = new FilesystemIterator($storeFolder, FilesystemIterator::SKIP_DOTS);\r\n    $limit = (iterator_count($fi));\r\n\r\n    $lastRow = \"SELECT * FROM ( SELECT * FROM cs ORDER BY CsID DESC LIMIT $limit) result ORDER BY CsID ASC\";\r\n    $run_query_last = mysqli_query($con, $lastRow);\r\n\r\n    while ($lastrow = mysqli_fetch_assoc($run_query_last)) {\r\n    $CsID_last = $lastrow['CsID'];\r\n    $CsValue_last = $lastrow['CsValue'];\r\n\r\n\r\n    ?>\r\n\r\n\r\n\r\n    <?php\r\n\r\n    $fi = new FilesystemIterator($storeFolder, FilesystemIterator::SKIP_DOTS);\r\n    $limit = (iterator_count($fi));\r\n\r\n    $lastRow = \"SELECT * FROM ( SELECT * FROM cv ORDER BY CvID DESC LIMIT $limit) result ORDER BY CvID ASC\";\r\n    $run_query_last = mysqli_query($con,$lastRow);\r\n\r\n    while ($lastrow = mysqli_fetch_assoc($run_query_last)) {\r\n    $CvID_last = $lastrow['CvID'];\r\n    $CvValue_last = $lastrow['CvValue'];\r\n\r\n    ?>\r\n\r\n    <?php\r\n\r\n    $fi = new FilesystemIterator($storeFolder, FilesystemIterator::SKIP_DOTS);\r\n    $limit = (iterator_count($fi));\r\n\r\n    $lastRow = \"SELECT * FROM ( SELECT * FROM cm ORDER BY CmID DESC LIMIT $limit) result ORDER BY CmID ASC\";\r\n    $run_query_last = mysqli_query($con,$lastRow);\r\n\r\n    while ($lastrow = mysqli_fetch_assoc($run_query_last)) {\r\n    $CmID_last = $lastrow['CmID'];\r\n    $CmValue_last = $lastrow['CmValue'];\r\n\r\n    ?>\r\n\r\n    <?php\r\n\r\n    $fi = new FilesystemIterator($storeFolder, FilesystemIterator::SKIP_DOTS);\r\n    $limit = (iterator_count($fi));\r\n\r\n    $lastRow = \"SELECT * FROM ( SELECT * FROM ccs ORDER BY CcsID DESC LIMIT $limit) result ORDER BY CcsID ASC\";\r\n    $run_query_last = mysqli_query($con, $lastRow);\r\n\r\n    while ($lastrow = mysqli_fetch_assoc($run_query_last)) {\r\n    $CcsID_last = $lastrow['CcsID'];\r\n    $CcsValue_last = $lastrow['CcsValue'];\r\n\r\n    ?>\r\n\r\n\r\n\r\n    <?php\r\n    $lastRow = \"SELECT * FROM ( SELECT * FROM totalcomplexity ORDER BY totalcomplexityID DESC LIMIT $limit) result ORDER BY totalcomplexityID ASC\";\r\n    $run_query_last = mysqli_query($con, $lastRow);\r\n\r\n    while ($lastrow = mysqli_fetch_assoc($run_query_last)) {\r\n    $totalcomplexityID_last = $lastrow['totalcomplexityID'];\r\n    $totalcomplexityValue_last = $lastrow['totalcomplexityValue'];\r\n\r\n    $final_total += $totalcomplexityValue_last;\r\n    ?>\r\n    <!-- begin:: Content -->\r\n    <div class=\"kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid\">\r\n        <!--Begin::Dashboard 3-->\r\n\r\n        <div class=\"col-lg-12 removeduplicateelement\">\r\n            <div class=\"kt-portlet kt-iconbox kt-iconbox--success kt-iconbox--animate-slow\">\r\n                <div class=\"kt-portlet__body\">\r\n                    <div class=\"kt-iconbox__body\">\r\n                        <div class=\"kt-iconbox__icon\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n                                 width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" version=\"1.1\" class=\"kt-svg-icon\">\r\n                                <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\r\n                                    <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\"/>\r\n                                    <path d=\"M8,3 L8,3.5 C8,4.32842712 8.67157288,5 9.5,5 L14.5,5 C15.3284271,5 16,4.32842712 16,3.5 L16,3 L18,3 C19.1045695,3 20,3.8954305 20,5 L20,21 C20,22.1045695 19.1045695,23 18,23 L6,23 C4.8954305,23 4,22.1045695 4,21 L4,5 C4,3.8954305 4.8954305,3 6,3 L8,3 Z\"\r\n                                          fill=\"#000000\" opacity=\"0.3\"/>\r\n                                    <path d=\"M10.875,15.75 C10.6354167,15.75 10.3958333,15.6541667 10.2041667,15.4625 L8.2875,13.5458333 C7.90416667,13.1625 7.90416667,12.5875 8.2875,12.2041667 C8.67083333,11.8208333 9.29375,11.8208333 9.62916667,12.2041667 L10.875,13.45 L14.0375,10.2875 C14.4208333,9.90416667 14.9958333,9.90416667 15.3791667,10.2875 C15.7625,10.6708333 15.7625,11.2458333 15.3791667,11.6291667 L11.5458333,15.4625 C11.3541667,15.6541667 11.1145833,15.75 10.875,15.75 Z\"\r\n                                          fill=\"#000000\"/>\r\n                                    <path d=\"M11,2 C11,1.44771525 11.4477153,1 12,1 C12.5522847,1 13,1.44771525 13,2 L14.5,2 C14.7761424,2 15,2.22385763 15,2.5 L15,3.5 C15,3.77614237 14.7761424,4 14.5,4 L9.5,4 C9.22385763,4 9,3.77614237 9,3.5 L9,2.5 C9,2.22385763 9.22385763,2 9.5,2 L11,2 Z\"\r\n                                          fill=\"#000000\"/>\r\n                                </g>\r\n                            </svg>\r\n                        </div>\r\n                        <div class=\"col-lg-12\">\r\n                            <div class=\"kt-iconbox__desc kt-font-success\">\r\n                                <?php $lastRow_final = \"SELECT * FROM ( SELECT * FROM finaltotal ORDER BY FinalTotalID DESC LIMIT 1) result ORDER BY FinalTotalID ASC\";\r\n                                $run_query_last_final = mysqli_query($con, $lastRow_final);\r\n\r\n                                while ($lastrow_final_t = mysqli_fetch_assoc($run_query_last_final)) {\r\n                                    $finaltotalID = $lastrow_final_t['finaltotal'];\r\n                                    $FinalTotalValue_last = $lastrow_final_t['FinalTotalValue']; ?>\r\n\r\n                                    <center><h1 style=\"font-family: 'Fira Code'\">Total Complexity\r\n                                            : <?php echo $FinalTotalValue_last; ?></h1></center>\r\n\r\n                                <?php } ?>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <!--Begin::Row-->\r\n        <div class=\"row\">\r\n\r\n\r\n            <!--begin::Portlet-->\r\n            <div style=\"background-color: #F4F7FF;\" class=\"kt-portlet kt-portlet--skin-solid kt-portlet--\">\r\n                <div class=\"kt-portlet__head\">\r\n                    <div class=\"kt-portlet__head-label\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"kt-portlet__head-icon kt-font-brand\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i class=\"flaticon-time-1\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n                        <h3 class=\"kt-portlet__head-title kt-font-brand\">\r\n                            Total Complexity of the Program due to All the Factors\r\n                        </h3>\r\n                    </div>\r\n\r\n                </div>\r\n                <div class=\"kt-portlet__body kt-font-brand\">\r\n\r\n\r\n                    <div class=\"row\">\r\n\r\n                        <div class=\"col-lg-12\">\r\n                            <div class=\"kt-portlet kt-iconbox kt-iconbox--brand kt-iconbox--animate-slower\">\r\n                                <div class=\"kt-portlet__body\">\r\n                                    <div class=\"kt-iconbox__body\">\r\n                                        <div class=\"kt-iconbox__icon\">\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                 xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"24px\" height=\"24px\"\r\n                                                 viewBox=\"0 0 24 24\" version=\"1.1\" class=\"kt-svg-icon\">\r\n                                                <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\r\n                                                    <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\"/>\r\n                                                    <path d=\"M2.56066017,10.6819805 L4.68198052,8.56066017 C5.26776695,7.97487373 6.21751442,7.97487373 6.80330086,8.56066017 L8.9246212,10.6819805 C9.51040764,11.267767 9.51040764,12.2175144 8.9246212,12.8033009 L6.80330086,14.9246212 C6.21751442,15.5104076 5.26776695,15.5104076 4.68198052,14.9246212 L2.56066017,12.8033009 C1.97487373,12.2175144 1.97487373,11.267767 2.56066017,10.6819805 Z M14.5606602,10.6819805 L16.6819805,8.56066017 C17.267767,7.97487373 18.2175144,7.97487373 18.8033009,8.56066017 L20.9246212,10.6819805 C21.5104076,11.267767 21.5104076,12.2175144 20.9246212,12.8033009 L18.8033009,14.9246212 C18.2175144,15.5104076 17.267767,15.5104076 16.6819805,14.9246212 L14.5606602,12.8033009 C13.9748737,12.2175144 13.9748737,11.267767 14.5606602,10.6819805 Z\"\r\n                                                          fill=\"#000000\" opacity=\"0.3\"/>\r\n                                                    <path d=\"M8.56066017,16.6819805 L10.6819805,14.5606602 C11.267767,13.9748737 12.2175144,13.9748737 12.8033009,14.5606602 L14.9246212,16.6819805 C15.5104076,17.267767 15.5104076,18.2175144 14.9246212,18.8033009 L12.8033009,20.9246212 C12.2175144,21.5104076 11.267767,21.5104076 10.6819805,20.9246212 L8.56066017,18.8033009 C7.97487373,18.2175144 7.97487373,17.267767 8.56066017,16.6819805 Z M8.56066017,4.68198052 L10.6819805,2.56066017 C11.267767,1.97487373 12.2175144,1.97487373 12.8033009,2.56066017 L14.9246212,4.68198052 C15.5104076,5.26776695 15.5104076,6.21751442 14.9246212,6.80330086 L12.8033009,8.9246212 C12.2175144,9.51040764 11.267767,9.51040764 10.6819805,8.9246212 L8.56066017,6.80330086 C7.97487373,6.21751442 7.97487373,5.26776695 8.56066017,4.68198052 Z\"\r\n                                                          fill=\"#000000\"/>\r\n                                                </g>\r\n                                            </svg>\r\n                                        </div>\r\n                                        <div class=\"col-lg-12\">\r\n                                            <div class=\"kt-iconbox__desc kt-font-brand\">\r\n\r\n\r\n                                                <center><h1 style=\"font-family: 'Fira Code'\">Cpr\r\n                                                        : <?php echo $totalcomplexityValue_last ?></h1></center>\r\n\r\n\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div class=\"kt-portlet__foot\">\r\n                        <div class=\"kt-form__actions\">\r\n                            <div class=\"row\">\r\n\r\n\r\n                                <!-- begin:: Content -->\r\n                                <div class=\"kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid\">\r\n\r\n\r\n                                    <div class=\"kt-portlet kt-portlet--mobile\">\r\n                                        <div class=\"kt-portlet__head kt-portlet__head--lg\">\r\n                                            <div class=\"kt-portlet__head-label\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t<span class=\"kt-portlet__head-icon\">\r\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"kt-font-brand flaticon2-line-chart\"></i>\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n                                                <h3 class=\"kt-portlet__head-title kt-font-brand\">\r\n                                                    Total Complexity of the Program by Statement : </h3>&nbsp;\r\n                                                <h3 class=\"kt-portlet__head-title kt-font-dark\"><?php $file = $_SESSION['filename'];\r\n                                                    echo $file; ?>\r\n                                                </h3>\r\n                                            </div>\r\n\r\n\r\n                                            <div class=\"kt-portlet__head-toolbar\">\r\n                                                <div class=\"kt-portlet__head-wrapper\">\r\n                                                    <div class=\"kt-portlet__head-actions\">\r\n                                                        <div class=\"dropdown dropdown-inline\">\r\n                                                            <button type=\"button\"\r\n                                                                    class=\"btn btn-default btn-icon-sm dropdown-toggle\"\r\n                                                                    data-toggle=\"dropdown\" aria-haspopup=\"true\"\r\n                                                                    aria-expanded=\"false\">\r\n                                                                <i class=\"la la-download\"></i> Export\r\n                                                            </button>\r\n                                                            <div class=\"dropdown-menu dropdown-menu-right\">\r\n                                                                <ul class=\"kt-nav\">\r\n                                                                    <li class=\"kt-nav__section kt-nav__section--first\">\r\n                                                                        <span class=\"kt-nav__section-text\">Choose an option</span>\r\n                                                                    </li>\r\n                                                                    <li class=\"kt-nav__item\">\r\n                                                                        <a href=\"#\" class=\"kt-nav__link\">\r\n                                                                            <i class=\"kt-nav__link-icon la la-print\"></i>\r\n                                                                            <span class=\"kt-nav__link-text\">Print</span>\r\n                                                                        </a>\r\n                                                                    </li>\r\n                                                                    <li class=\"kt-nav__item\">\r\n                                                                        <a href=\"#\" class=\"kt-nav__link\">\r\n                                                                            <i class=\"kt-nav__link-icon la la-copy\"></i>\r\n                                                                            <span class=\"kt-nav__link-text\">Copy</span>\r\n                                                                        </a>\r\n                                                                    </li>\r\n                                                                    <li class=\"kt-nav__item\">\r\n                                                                        <a href=\"#\" class=\"kt-nav__link\">\r\n                                                                            <i class=\"kt-nav__link-icon la la-file-excel-o\"></i>\r\n                                                                            <span class=\"kt-nav__link-text\">Excel</span>\r\n                                                                        </a>\r\n                                                                    </li>\r\n                                                                    <li class=\"kt-nav__item\">\r\n                                                                        <a href=\"#\" class=\"kt-nav__link\">\r\n                                                                            <i class=\"kt-nav__link-icon la la-file-text-o\"></i>\r\n                                                                            <span class=\"kt-nav__link-text\">CSV</span>\r\n                                                                        </a>\r\n                                                                    </li>\r\n                                                                    <li class=\"kt-nav__item\">\r\n                                                                        <a href=\"#\" class=\"kt-nav__link\">\r\n                                                                            <i class=\"kt-nav__link-icon la la-file-pdf-o\"></i>\r\n                                                                            <span class=\"kt-nav__link-text\">PDF</span>\r\n                                                                        </a>\r\n                                                                    </li>\r\n                                                                </ul>\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div class=\"kt-portlet__body kt-font-dark\">\r\n                                            <!--begin: Datatable -->\r\n                                            <table style=\"font-family: 'Fira Code'; text-align: center\"\r\n                                                   class=\"table table-striped- table-bordered table-hover table-checkable\"\r\n                                                   id=\"kt_table_1\">\r\n                                                <thead>\r\n                                                <tr class=\"kt-label-bg-color-1\" style=\"font-family: 'Fira Code Medium'\">\r\n                                                    <th>Line No</th>\r\n                                                    <th>Program Statements</th>\r\n                                                    <th>Cs</th>\r\n                                                    <th>Cv</th>\r\n                                                    <th>Cm</th>\r\n                                                    <th>Ci</th>\r\n                                                    <th>Ccp</th>\r\n                                                    <th>Ccs</th>\r\n                                                    <th style=\"color: white\" class=\"kt-label-bg-color-2\">TCps</th>\r\n                                                </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n\r\n                                                <?php\r\n\r\n\r\n\r\n\r\n\r\n                                                $lastRow = \"SELECT * FROM controlstructures ORDER BY ControlStructureID DESC LIMIT 1\";\r\n                                                $run_query_last = mysqli_query($con, $lastRow);\r\n\r\n                                                while ($lastrow = mysqli_fetch_assoc($run_query_last)) {\r\n                                                $ControlStructureID_last = $lastrow['ControlStructureID'];\r\n                                                $CSif_last = $lastrow['CSif'];\r\n                                                $CSiterative_last = $lastrow['CSfor'];\r\n                                                $CSswitch_last = $lastrow['CSswitch'];\r\n                                                $CScase_last = $lastrow['CScase'];\r\n\r\n\r\n                                                $i = 0; //increment to each loop\r\n                                                $count = 0;\r\n\r\n                                                $total_ccs = 0;\r\n\r\n                                                $Wtcs = 0;\r\n                                                $NC = 0;\r\n                                                $Ccspps = 0;\r\n                                                $Ccs = 0;\r\n                                                $total_TCps = 0;\r\n\r\n\r\n                                                $if_val = \"if\";\r\n                                                $switch_val = \"switch\";\r\n                                                $case_val = \"case\";\r\n                                                $while_val = \"while\";\r\n                                                $for_val = \"for\";\r\n                                                $else_val = \"else\";\r\n                                                $end_curlyBrace = \"}\";\r\n\r\n\r\n                                                $arrCCS = [];\r\n                                                $arr2 = [];\r\n                                                $elseArr = [];\r\n                                                $inElse = false;\r\n                                                $elseCount = 0;\r\n\r\n\r\n                                                //Default Weights\r\n                                                $weight_if_elseif = $CSif_last;\r\n                                                $weight_for_while_dowhile = $CSiterative_last;\r\n                                                $weight_switch = $CSswitch_last;\r\n                                                $weight_case = $CScase_last;\r\n\r\n                                                $ifValue = 0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                                $lastRow = \"SELECT * FROM variables ORDER BY VariableID DESC LIMIT 1\";\r\n                                                $run_query_last = mysqli_query($con,$lastRow);\r\n\r\n                                                while ($lastrow = mysqli_fetch_assoc($run_query_last)) {\r\n                                                $VariableID_last = $lastrow['VariableID'];\r\n                                                $GlobalVariable_last = $lastrow['GlobalVariable'];\r\n                                                $LocalVariable_last = $lastrow['LocalVariable'];\r\n                                                $PrimitiveVariable_last = $lastrow['PrimitiveVariable'];\r\n                                                $CompositeVariable_last = $lastrow['CompositeVariable'];\r\n\r\n                                                $i = 0; //increment to each loop\r\n                                                $count = 0;\r\n                                                $total_Cv = 0;\r\n\r\n                                                $Wvs = 0;\r\n                                                $Npdtv = 0;\r\n                                                $Ncdtv = 0;\r\n                                                $Cv = 0;\r\n                                                $beforeCv = 0;\r\n\r\n                                                //Default Weights\r\n                                                $weight_primitive_datatype_variable = $PrimitiveVariable_last;\r\n                                                $weight_composite_datatype_variable = $CompositeVariable_last;\r\n                                                $weight_global_variable = $GlobalVariable_last;\r\n                                                $weight_local_variable = $LocalVariable_last;\r\n\r\n\r\n\r\n\r\n                                                $lastRow = \"SELECT * FROM methods ORDER BY \tMethodID DESC LIMIT 1\";\r\n                                                $run_query_last = mysqli_query($con,$lastRow);\r\n\r\n                                                while ($lastrow = mysqli_fetch_assoc($run_query_last)) {\r\n                                                $MethodID_last = $lastrow['MethodID'];\r\n                                                $PrimitiveReturnType_last = $lastrow['PrimitiveReturnType'];\r\n                                                $CompositeReturnType_last = $lastrow['CompositeReturnType'];\r\n                                                $VoidReturnType_last = $lastrow['VoidReturnType'];\r\n                                                $PrimitiveParameter_last = $lastrow['PrimitiveParameter'];\r\n                                                $CompositeParameter_last = $lastrow['CompositeParameter'];\r\n\r\n                                                $i = 0; //increment to each loop\r\n                                                $count = 0;\r\n                                                $total_Cm = 0;\r\n\r\n                                                //Default Weights\r\n                                                $weight_primitive_retuntype = $PrimitiveReturnType_last;\r\n                                                $weight_composite_returntype = $CompositeReturnType_last;\r\n                                                $weight_void_returntype = $VoidReturnType_last;\r\n                                                $weight_primitive_datatype_parameter = $PrimitiveParameter_last;\r\n                                                $weight_composite_datatype_parameter = $CompositeParameter_last;\r\n\r\n\r\n\r\n\r\n\r\n                                                $i = 0; //increment to each loop\r\n                                                $count = 0;\r\n                                                $total_cs = 0;\r\n\r\n                                                $Nkw = 0;\r\n                                                $Nid = 0;\r\n                                                $Nop = 0;\r\n                                                $Nnv = 0;\r\n                                                $Nsl = 0;\r\n                                                $Cs = 0;\r\n\r\n                                                $TCps = 0;\r\n\r\n                                                $lastRow = \"SELECT * FROM size ORDER BY SizeID DESC LIMIT 1\";\r\n                                                $run_query_last = mysqli_query($con, $lastRow);\r\n\r\n                                                while ($lastrow = mysqli_fetch_assoc($run_query_last)) {\r\n                                                $SizeID_last = $lastrow['SizeID'];\r\n                                                $Keyword_last = $lastrow['Keyword'];\r\n                                                $Identifier_last = $lastrow['Identifier'];\r\n                                                $Operator_last = $lastrow['Operator'];\r\n                                                $NumericalValue_last = $lastrow['NumericalValue'];\r\n                                                $StringLiteral_last = $lastrow['StringLiteral'];\r\n\r\n\r\n                                                //Default Weights\r\n                                                $weight_keyword = $Keyword_last;\r\n                                                $weight_identifier = $Identifier_last;\r\n                                                $weight_operator = $Operator_last;\r\n                                                $weight_numerical = $NumericalValue_last;\r\n                                                $weight_string = $StringLiteral_last;\r\n\r\n                                                $entireCode = str_replace(';', ';', $trim);\r\n\r\n                                                //Matching Methods - Entire Code\r\n                                                $methods = (getContentsBetween($entireCode, ') {', '}'));\r\n\r\n                                                //Matching Outside from Methods\r\n                                                $codeOutsideMethods = str_replace($methods, '', $entireCode);\r\n\r\n                                                $splitAfterSemicolon = str_replace(';', ';', $split);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                                if (!$split == ''){\r\n\r\n                                                foreach ($split\r\n\r\n                                                as $val) { // Traverse the array with FOREACH\r\n\r\n                                                $val;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                                $Wmrt = null;\r\n                                                $Npdtp = null;\r\n                                                $Ncdtp = null;\r\n                                                $NpdtpBefore = null;\r\n                                                $NcdtpBefore = null;\r\n                                                $Cm = null;\r\n\r\n                                                for($x = 0; $x <= $row_count; $x++){\r\n\r\n\r\n\r\n                                                    if (preg_match('/protected \\w+ \\w+\\(.*?\\) \\{|private \\w+ \\w+\\(.*?\\) \\{| public \\w+ \\w+\\(.*?\\) \\{|public static void main\\(String.*?\\) {/', $val)){\r\n\r\n\r\n\r\n                                                        if (preg_match('/protected void \\w+\\(.*?\\) \\{|private void \\w+\\(.*?\\) \\{| public void \\w+\\(.*?\\) \\{|public static void main\\(String.*?\\) {/', $val)){\r\n\r\n                                                            $Wmrt = $weight_void_returntype;\r\n\r\n                                                        }\r\n\r\n                                                        if (preg_match('/public (byte|short|int|long|float|double|char|String|boolean) \\w+\\(.*?\\) \\{|private (byte|short|int|long|float|double|char|String|boolean) \\w+\\(.*?\\) \\{|protected (byte|short|int|long|float|double|char|String|boolean) \\w+\\(.*?\\) \\{/', $val)){\r\n\r\n                                                            $Wmrt = $weight_primitive_retuntype;\r\n\r\n                                                        }\r\n\r\n\r\n                                                        if (preg_match_all('/byte |short |int |long |float |double |char |String |boolean |void/', $val, $counter) == 0) {\r\n\r\n                                                            $Wmrt = $weight_composite_returntype;\r\n\r\n                                                        }\r\n\r\n\r\n\r\n                                                        $methodsCount = preg_match_all('/protected \\w+ \\w+\\(.*?\\) \\{|private \\w+ \\w+\\(.*?\\) \\{| public \\w+ \\w+\\(.*?\\) \\{|public static void main\\(String.*?\\) {/', $val, $counter);\r\n                                                        $methods_methods = $counter;\r\n\r\n                                                        if (!$methods_methods == \"\") {\r\n                                                            foreach ($methods_methods as $method_method) {\r\n                                                                if (!$method_method == \"\") {\r\n                                                                    foreach ($method_method as $methodAfter) {\r\n\r\n                                                                        $methodAfter;\r\n\r\n\r\n                                                                        if (preg_match_all('/\\(.*?\\)/', $methodAfter, $counter)) {\r\n\r\n                                                                            if (preg_match_all('/byte |short |int |long |float |double |char |String |boolean /', $methodAfter, $counter)) {\r\n\r\n                                                                                $NpdtpBefore = preg_match_all('/byte |short |int |long |float |double |char |String |boolean /', $methodAfter, $counter);\r\n\r\n                                                                            }\r\n\r\n                                                                            if(preg_match_all('/byte |short |int |long |float |double |char |String |boolean /', $methodAfter, $counter) == 0){\r\n\r\n                                                                                $NcdtpBefore = 1;\r\n\r\n                                                                            }\r\n\r\n                                                                            if(preg_match_all('/\\(\\)/', $methodAfter, $counter)){\r\n\r\n                                                                                $NpdtpBefore = 0;\r\n                                                                                $NcdtpBefore = 0;\r\n\r\n                                                                            }\r\n\r\n                                                                        }\r\n\r\n\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n\r\n\r\n\r\n                                                    }\r\n\r\n\r\n                                                    if ($Wmrt >= 0 && $NpdtpBefore > 0) {\r\n\r\n                                                        $NcdtpBefore = 0;\r\n\r\n                                                    }\r\n\r\n                                                    if ($Wmrt >= 0 && $NcdtpBefore > 0) {\r\n\r\n                                                        $NpdtpBefore = 0;\r\n\r\n                                                    }\r\n\r\n\r\n\r\n\r\n                                                }\r\n\r\n                                                // -------- Weight due to return type - End --------\r\n\r\n                                                $Cm = $Wmrt + ($NpdtpBefore * $weight_primitive_datatype_parameter) + ($Ncdtp * $weight_composite_datatype_parameter);\r\n\r\n\r\n                                                $total_Cm += $Cm;\r\n                                                if ($NcdtpBefore == 1){\r\n\r\n                                                    $Cm = $NcdtpBefore * $weight_composite_datatype_parameter;\r\n                                                    $total_Cm += $Cm;\r\n                                                }\r\n\r\n                                                if (preg_match_all('/protected \\w+ \\w+\\(.*?\\) \\{|private \\w+ \\w+\\(.*?\\) \\{| public \\w+ \\w+\\(.*?\\) \\{|public static void main\\(String.*?\\) {/', $val, $counter) == 0){\r\n\r\n                                                    $Cm = 0;\r\n\r\n                                                }\r\n\r\n\r\n\r\n                                                $global_variable_count_total = 0;\r\n                                                $local_variable_count_total = 0;\r\n                                                $primitive_datatype_variable_count_total = 0;\r\n                                                $composite_datatype_variable_count_total = 0;\r\n\r\n\r\n                                                foreach ($methods as $method) {\r\n\r\n                                                    $method;\r\n\r\n                                                    //Matching variables inside methods (Local Variables)\r\n                                                    $local_variable_count = preg_match_all('/byte \\w+\\;|short \\w+\\;|int \\w+\\;|long \\w+\\;|float \\w+\\;|double \\w+\\;|char \\w+\\;|String \\w+\\;|boolean \\w+\\;|\\w+ \\w+ \\= \\w+|\\w+ \\w+\\, \\w+\\;|private \\w+ \\w+\\;/', $method, $counter);\r\n                                                    $local_variables = $counter;\r\n\r\n                                                    //Converting local variable array into normal lines\r\n                                                    foreach ($local_variables as $local) {\r\n\r\n                                                        if (!$local == \"\") {\r\n\r\n                                                            foreach ($local as $local_variable) {\r\n\r\n                                                                //Iterate through all rows of code in the table\r\n                                                                for ($x = 0; $x <= $row_count; $x++) {\r\n\r\n                                                                    $local_variables; // The array of local variables\r\n                                                                    $splitAfterSemicolon; // The array of code lines\r\n\r\n                                                                    //echo $local_variable;// Single lines of local variables\r\n                                                                    //echo $val;// Single lines of code\r\n                                                                    //echo \"<br>\";\r\n\r\n\r\n                                                                    //Checking the code lines if there are matching local variables\r\n                                                                    if (strpos($val, $local_variable) !== false) {\r\n\r\n                                                                        $local_variable_count_total = substr_count($val, $local_variable);\r\n\r\n\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    //Matching variables outside methods (Global Variables)\r\n                                                    $global_variable_count = preg_match_all('/byte \\w+\\;|short \\w+\\;|int \\w+\\;|long \\w+\\;|float \\w+\\;|double \\w+\\;|char \\w+\\;|String \\w+\\;|boolean \\w+\\;|\\w+ \\w+ \\= \\w+|\\w+ \\w+\\, \\w+\\;|private \\w+ \\w+\\;/', $codeOutsideMethods, $counter);\r\n                                                    $global_variables = $counter;\r\n\r\n                                                    //Converting global variable array into normal lines\r\n                                                    foreach ($global_variables as $global) {\r\n                                                        $result = array_filter($global);\r\n                                                        if (!$result == \"\") {\r\n                                                            foreach ($result as $global_variable) {\r\n\r\n                                                                //Iterate through all rows of code in the table\r\n                                                                for ($x = 0; $x <= $row_count; $x++) {\r\n\r\n                                                                    //print_r($global_variables);\r\n\r\n                                                                    $global_variables; // The array of global variables\r\n                                                                    $splitAfterSemicolon; // The array of code lines\r\n\r\n                                                                    //echo $global_variable;// Single lines of global variables\r\n                                                                    //echo $val;// Single lines of code\r\n                                                                    //echo \"<br>\";\r\n\r\n                                                                    //Checking the code lines if there are matching global variables\r\n\r\n                                                                    if (strpos($val, $global_variable) !== false) {\r\n\r\n                                                                        $global_variable_count_total = substr_count($val, $global_variable);\r\n\r\n                                                                    }\r\n\r\n                                                                }\r\n\r\n                                                            }\r\n\r\n                                                        }\r\n\r\n                                                    }\r\n\r\n                                                    //Matching primitive variables\r\n                                                    $total_variable_count = preg_match_all('/byte.*?\\;|short .*?\\;|int .*?\\;|long .*?\\;|float .*?\\;|double .*?\\;|char .*?\\;|String .*?\\;|boolean .*?\\;/', $entireCode, $counter);\r\n                                                    $all_prem_variables = $counter;\r\n\r\n                                                    //Converting all variables array into normal lines\r\n                                                    foreach ($all_prem_variables as $vars) {\r\n                                                        $result = array_filter($vars);\r\n                                                        if (!$result == \"\") {\r\n                                                            foreach ($result as $all_variable) {\r\n\r\n                                                                //Iterate through all rows of code in the table\r\n                                                                for ($x = 0; $x <= $row_count; $x++) {\r\n\r\n\r\n                                                                    //print_r($all_variables);\r\n\r\n                                                                    $all_prem_variables; // The array of all variables\r\n                                                                    $splitAfterSemicolon; // The array of code lines\r\n\r\n                                                                    //echo $all_variable;// Single lines of all variables\r\n                                                                    //echo $val;// Single lines of code\r\n                                                                    //echo \"<br>\";\r\n\r\n                                                                    //Checking the code lines if there are matching local variables\r\n\r\n\r\n                                                                    if (strpos($val, $all_variable) !== false) {\r\n\r\n                                                                        $primitive_datatype_variable_count_total = substr_count($val, $all_variable);\r\n\r\n                                                                    }\r\n\r\n                                                                    if (preg_match('/private byte \\w+, \\w+\\;|private short \\w+, \\w+\\;|private int \\w+, \\w+\\;|private long \\w+, \\w+\\;|private float \\w+, \\w+\\;|private double \\w+, \\w+\\;|private char \\w+, \\w+\\;|private String \\w+, \\w+\\;|private boolean \\w+, \\w+\\;/', $val)) {\r\n\r\n                                                                        $primitive_datatype_variable_count_total = 2;\r\n\r\n                                                                    }\r\n\r\n                                                                    if ($Wvs > 0 && $Ncdtv > 0 && preg_match_all('/byte |short |int |long |float |double |char |String |boolean /', $val, $counter)) {\r\n\r\n                                                                        $primitive_datatype_variable_count_total = 1;\r\n\r\n                                                                    }\r\n\r\n                                                                }\r\n\r\n                                                            }\r\n\r\n                                                        }\r\n\r\n                                                    }\r\n\r\n                                                    //Matching composite variables\r\n                                                    for ($x = 0; $x <= $row_count; $x++) {\r\n\r\n\r\n                                                        if ($Wvs > 0 && $Npdtv < 1) {\r\n\r\n                                                            $composite_datatype_variable_count_total = 1;\r\n\r\n                                                        } else {\r\n\r\n                                                            $composite_datatype_variable_count_total = 0;\r\n\r\n                                                        }\r\n\r\n                                                        if ($Wvs > 0 && $Npdtv < 1 && preg_match_all('/\\w+ \\w+ \\w+\\, \\w+\\;/', $val, $counter)) {\r\n\r\n                                                            $composite_datatype_variable_count_total = 2;\r\n\r\n                                                        }\r\n\r\n                                                    }\r\n\r\n\r\n\r\n\r\n                                                    $Wvs = ($global_variable_count_total * $weight_global_variable) + ($local_variable_count_total * $weight_local_variable);\r\n\r\n                                                    $Npdtv = $primitive_datatype_variable_count_total;\r\n\r\n                                                    $Ncdtv = $composite_datatype_variable_count_total;\r\n\r\n                                                }\r\n\r\n\r\n                                                if ($Wvs == 0){\r\n                                                    $Wvs = null;\r\n                                                    $Npdtv = null;\r\n                                                    $Ncdtv = null;\r\n                                                }\r\n\r\n                                                if ($Ncdtv == 0){\r\n                                                    $Ncdtv = null;\r\n                                                }\r\n                                                if ($Npdtv == 0){\r\n                                                    $Npdtv = null;\r\n                                                }\r\n\r\n                                                $beforeCv = ($weight_primitive_datatype_variable * $Npdtv) + ($weight_composite_datatype_variable * $Ncdtv);\r\n\r\n                                                $Cv = $Wvs * $beforeCv;\r\n\r\n                                                $total_Cv += $Cv;\r\n\r\n\r\n                                                // -------- Weight due to Keywords - Begin --------\r\n\r\n                                                $keywords = ['abstract', 'assert', 'break', 'catch', 'class', 'const', 'continue', 'default', 'do', 'else', 'enum', 'extends', 'final', 'finally', 'goto', 'implements', 'instanceof', 'interface', 'native', 'new', 'package', 'private', 'protected', 'public', 'return', 'static', 'strictfp', 'super', 'synchronized', 'this', 'throw', 'throws', 'transient', 'try', 'void', 'volatile'];\r\n\r\n                                                $tokenkw = \"\";\r\n                                                $tokenOp = \"\";\r\n                                                $tokenClass = \"\";\r\n                                                $tokenNumber = \"\";\r\n                                                $tokenString = \"\";\r\n\r\n                                                $count_methods_2 = 0;\r\n                                                $count_methods_3 = 0;\r\n                                                $count_methods_4 = 0;\r\n                                                $count_methods_5 = 0;\r\n\r\n\r\n\r\n                                                foreach ($keywords as $word) {\r\n\r\n\r\n                                                    if (preg_match('/\\babstract\\b/', $val) !== false) {\r\n\r\n                                                        $abstract_count = preg_match_all('/\\babstract\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bassert\\b/', $val) !== false) {\r\n\r\n                                                        $assert_count = preg_match_all('/\\bassert\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bbreak\\b/', $val) !== false) {\r\n\r\n                                                        $break_count = preg_match_all('/\\bbreak\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bcatch\\b/', $val) !== false) {\r\n\r\n                                                        $catch_count = preg_match_all('/\\bcatch\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bclass\\b/', $val) !== false) {\r\n\r\n                                                        $class_count = preg_match_all('/\\bclass\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bconst\\b/', $val) !== false) {\r\n\r\n                                                        $const_count = preg_match_all('/\\bconst\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bcontinue\\b/', $val) !== false) {\r\n\r\n                                                        $continue_count = preg_match_all('/\\bcontinue\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bdefault\\b/', $val) !== false) {\r\n\r\n                                                        $default_count = preg_match_all('/\\bdefault\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bdo\\b/', $val) !== false) {\r\n\r\n                                                        $do_count = preg_match_all('/\\bdo\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\belse\\b/', $val) !== false) {\r\n\r\n                                                        $else_count = preg_match_all('/\\belse\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\benum\\b/', $val) !== false) {\r\n\r\n                                                        $enum_count = preg_match_all('/\\benum\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bextends\\b/', $val) !== false) {\r\n\r\n                                                        $extends_count = preg_match_all('/\\bextends\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bfinal\\b/', $val) !== false) {\r\n\r\n                                                        $final_count = preg_match_all('/\\bfinal\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bfinally\\b/', $val) !== false) {\r\n\r\n                                                        $finally_count = preg_match_all('/\\bfinally\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bgoto\\b/', $val) !== false) {\r\n\r\n                                                        $goto_count = preg_match_all('/\\bgoto\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bimplements\\b/', $val) !== false) {\r\n\r\n                                                        $implements_count = preg_match_all('/\\bimplements\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n\r\n                                                    if (preg_match('/\\binstanceof\\b/', $val) !== false) {\r\n\r\n                                                        $instanceof_count = preg_match_all('/\\binstanceof\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\binterface\\b/', $val) !== false) {\r\n\r\n                                                        $interface_count = preg_match_all('/\\binterface\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bnative\\b/', $val) !== false) {\r\n\r\n                                                        $native_count = preg_match_all('/\\bnative\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bnew\\b/', $val) !== false) {\r\n\r\n                                                        $new_count = preg_match_all('/\\bnew\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bpackage\\b/', $val) !== false) {\r\n\r\n                                                        $package_count = preg_match_all('/\\bpackage\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bprivate\\b/', $val) !== false) {\r\n\r\n                                                        $private_count = preg_match_all('/\\bprivate\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bprotected\\b/', $val) !== false) {\r\n\r\n                                                        $protected_count = preg_match_all('/\\bprotected\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bpublic\\b/', $val) !== false) {\r\n\r\n                                                        $public_count = preg_match_all('/\\bpublic\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\breturn\\b/', $val) !== false) {\r\n\r\n                                                        $return_count = preg_match_all('/\\breturn\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bstatic\\b/', $val) !== false) {\r\n\r\n                                                        $static_count = preg_match_all('/\\bstatic\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bstrictfp\\b/', $val) !== false) {\r\n\r\n                                                        $strictfp_count = preg_match_all('/\\bstrictfp\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bsuper\\b/', $val) !== false) {\r\n\r\n                                                        $super_count = preg_match_all('/\\bsuper\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bsynchronized\\b/', $val) !== false) {\r\n\r\n                                                        $synchronized_count = preg_match_all('/\\bsynchronized\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bthis\\b/', $val) !== false) {\r\n\r\n                                                        $this_count = preg_match_all('/\\bthis\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bthrow\\b/', $val) !== false) {\r\n\r\n                                                        $throw_count = preg_match_all('/\\bthrow\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bthrows\\b/', $val) !== false) {\r\n\r\n                                                        $throws_count = preg_match_all('/\\bthrows\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\btransient\\b/', $val) !== false) {\r\n\r\n                                                        $transient_count = preg_match_all('/\\btransient\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\btry\\b/', $val) !== false) {\r\n\r\n                                                        $try_count = preg_match_all('/\\btry\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bvoid\\b/', $val) !== false) {\r\n\r\n                                                        $void_count = preg_match_all('/\\bvoid\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/\\bvolatile\\b/', $val) !== false) {\r\n\r\n                                                        $volatile_count = preg_match_all('/\\bvolatile\\b/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                }\r\n\r\n                                                $Nkw = ($abstract_count + $assert_count + $break_count + $catch_count + $class_count + $const_count + $continue_count + $default_count + $do_count + $else_count + $enum_count + $extends_count + $final_count + $finally_count + $goto_count + $implements_count + $instanceof_count + $interface_count + $native_count + $new_count + $package_count + $private_count + $protected_count + $public_count + $return_count + $static_count + $strictfp_count + $super_count + $synchronized_count + $this_count + $throw_count + $throws_count + $transient_count + $try_count + $void_count + $volatile_count) * $weight_keyword;\r\n\r\n                                                // -------- Weight due to Keywords - End --------\r\n\r\n\r\n                                                // -------- Weight due to Identifiers - Begin --------\r\n\r\n                                                $identifiers_count_total = 0;\r\n\r\n                                                for ($x = 0; $x <= $row_count; $x++) {\r\n\r\n\r\n\r\n\r\n\r\n                                                    //Matching Classes\r\n                                                    $method_names_2 = (getContentsBetween($val, 'void', ') {'));\r\n                                                    foreach ($method_names_2 as $methods_2) {\r\n                                                        if (strpos($val, $methods_2)) {\r\n\r\n\r\n\r\n                                                            $count_methods_2 = substr_count($val,$methods_2);\r\n\r\n\r\n\r\n                                                        }\r\n\r\n                                                    }\r\n                                                    $method_names_3 = (getContentsBetween($val, 'int', ') {'));\r\n                                                    foreach ($method_names_3 as $methods_3) {\r\n                                                        if (strpos($val, $methods_3)) {\r\n\r\n\r\n\r\n                                                            $count_methods_3 = substr_count($val,$methods_3);\r\n\r\n\r\n\r\n                                                        }\r\n\r\n                                                    }\r\n\r\n                                                    $method_names_4 = (getContentsBetween($val, 'String', ') {'));\r\n                                                    foreach ($method_names_4 as $methods_4) {\r\n                                                        if (strpos($val, $methods_4)) {\r\n\r\n\r\n\r\n                                                            $count_methods_4 = substr_count($val,$methods_4);\r\n\r\n\r\n\r\n                                                        }\r\n\r\n                                                    }\r\n\r\n                                                    $method_names_5 = (getContentsBetween($val, 'double', ') {'));\r\n                                                    foreach ($method_names_5 as $methods_5) {\r\n                                                        if (strpos($val, $methods_5)) {\r\n\r\n\r\n\r\n                                                            $count_methods_5 = substr_count($val,$methods_5);\r\n\r\n\r\n\r\n                                                        }\r\n\r\n                                                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                                    if (preg_match('/class\\s*(\\w+)/', $val) !== false) {\r\n\r\n                                                        $count_class = preg_match_all('/class\\s*(\\w+)/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/(?:(?:public|private|protected|static|final|native|synchronized|abstract|transient)+\\s+)+[$_\\w<>\\[\\]\\s]*\\s+[\\$_\\w]+\\([^\\)]*\\)?\\s*\\{?[^\\}]*\\}?/', $val) !== false) {\r\n\r\n                                                        $count_methods = preg_match_all('/(?:(?:public|private|protected|static|final|native|synchronized|abstract|transient)+\\s+)+[$_\\w<>\\[\\]\\s]*\\s+[\\$_\\w]+\\([^\\)]*\\)?\\s*\\{?[^\\}]*\\}?/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/= new (.*?)\\((.*?)\\);|=new (.*?)\\((.*?)\\);/', $val) !== false) {\r\n\r\n                                                        $count_objects = preg_match_all('/= new (.*?)\\((.*?)\\);|=new (.*?)\\((.*?)\\);/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/= new|=new/', $val) !== false) {\r\n\r\n                                                        $count_variables = preg_match_all('/= new|=new/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/= new|=new/', $val) !== false) {\r\n\r\n                                                        $count_arguments = preg_match_all('/= new|=new/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/= new|=new/', $val) !== false) {\r\n\r\n                                                        $count_data_structures = preg_match_all('/= new|=new/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n\r\n                                                    $identifiers_count_total = $count_class + $count_objects + $count_methods + $count_methods_2 + $count_methods_3 + $count_methods_4 + $count_methods_5;\r\n\r\n                                                    $Nid = $identifiers_count_total * $weight_identifier;\r\n\r\n                                                }\r\n\r\n                                                // -------- Weight due to Identifiers - End --------\r\n\r\n                                                // -------- Weight due to Operators - Begin --------\r\n\r\n                                                //$operators = array('+', '-', '*', '/', '%', '++', '--', '==', '!=', '>', '<', '>=', '<=', '&&', '||', '!', '|', '^', '~', '<<', '>>', '>>>', '<<<', ',', '->', '.', '::', '+=', '-=', '*=', '/=', '=', '>>>=', '|=', '&=', '%=', '<<=', '>>=', '^=');\r\n\r\n                                                $operators = array('+', '-', '*', '/', '%', '=', '>', '<', '&&', '!', '|', '^', '~', ',', '.', '::');\r\n\r\n                                                foreach ($operators as $word) {\r\n\r\n                                                    if (preg_match('/(\\<\\=)+|(\\=\\>)+|(\\=\\<)+|(\\>\\=)+|(\\+)+|(\\-)+|(\\=)+|(\\*)+|(\\/)+|(\\%)+|(\\>)+|(\\>)+|(\\<)+|(\\&\\&)+|(\\!)+|(\\|)+|(\\^)+|(\\~)+|(\\,)+|(\\.)+|(\\:\\:)+/', $val) !== false) {\r\n\r\n                                                        $op_count = preg_match_all('/(\\<\\=)+|(\\=\\>)+|(\\=\\<)+|(\\>\\=)+|(\\+)+|(\\-)+|(\\=)+|(\\*)+|(\\/)+|(\\%)+|(\\>)+|(\\>)+|(\\<)+|(\\&\\&)+|(\\!)+|(\\|)+|(\\^)+|(\\~)+|(\\,)+|(\\.)+|(\\:\\:)+/', $val, $counter);\r\n\r\n\r\n                                                    }\r\n\r\n                                                    $Nop = $op_count * $weight_operator;\r\n\r\n                                                }\r\n\r\n                                                // -------- Weight due to Operators - End --------\r\n\r\n\r\n                                                // -------- Weight due to Numerical Values - Begin --------\r\n\r\n                                                $numbers = array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9');\r\n                                                $numbers_count_total = 0;\r\n\r\n                                                foreach ($numbers as $word) {\r\n\r\n                                                    if (preg_match('/(\\d)+/', $val) !== false) {\r\n\r\n                                                        $numbers_count_total = preg_match_all('/(\\d)+/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    $Nnv = $numbers_count_total * $weight_numerical;\r\n\r\n                                                }\r\n\r\n                                                // -------- Weight due to Numerical Values - End --------\r\n\r\n\r\n                                                // -------- Weight due to String Literals - Begin --------\r\n\r\n                                                $strings_count_total = 0;\r\n\r\n                                                for ($x = 0; $x <= $row_count; $x++) {\r\n\r\n                                                    if (preg_match('/\"(.*?)\"/', $val) !== false) {\r\n\r\n                                                        $strings_count_total = preg_match_all('/\"(.*?)\"/', $val, $counter);\r\n\r\n                                                    }\r\n\r\n                                                    $Nsl = $strings_count_total * $weight_string;\r\n\r\n                                                }\r\n\r\n                                                // -------- Weight due to String Literals - End --------\r\n\r\n\r\n                                                foreach ($keywords as $word) {\r\n                                                    if ($Nkw > 0 && strpos($val, $word)) {\r\n                                                        $tokenkw = $word;\r\n                                                    }\r\n                                                }\r\n\r\n                                                foreach ($operators as $op) {\r\n                                                    if (strpos($val, $op)) {\r\n                                                        $tokenOp = $op;\r\n                                                    }\r\n                                                }\r\n\r\n                                                foreach ($numbers as $number) {\r\n                                                    if (strpos($val, $number)) {\r\n                                                        $tokenNumber = $number;\r\n                                                    }\r\n                                                }\r\n\r\n\r\n                                                if ($Nkw == 0 && preg_match_all('/import /', $val, $counter)) {\r\n                                                    $Nkw = null;\r\n                                                    $Nid = null;\r\n                                                    $Nop = null;\r\n                                                    $Nnv = null;\r\n                                                    $Nsl = null;\r\n                                                }\r\n\r\n\r\n                                                for ($x = 0; $x <= $row_count; $x++) {\r\n                                                    //Matching Classes\r\n                                                    $classes = (getContentsBetween($val, 'class ', '{'));\r\n                                                    foreach ($classes as $class) {\r\n                                                        if (strpos($val, $class)) {\r\n                                                            $tokenClass = $class;\r\n\r\n                                                        }\r\n                                                    }\r\n\r\n                                                }\r\n\r\n                                                for ($x = 0; $x <= $row_count; $x++) {\r\n                                                    //Matching Strings\r\n                                                    $strings_count = preg_match_all('/\"(.*?)\"/', $val, $counter);\r\n\r\n                                                    foreach ($counter as $string) {\r\n                                                        foreach ($string as $str) {\r\n                                                            if (strpos($val, $str)) {\r\n                                                                $tokenString = $str;\r\n\r\n                                                            }\r\n\r\n                                                        }\r\n\r\n                                                    }\r\n\r\n                                                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                                $previousCCS = 0;\r\n                                                $currentCCS = 0;\r\n\r\n\r\n\r\n\r\n\r\n                                                $conditional_words = array('if', 'for', 'while', 'switch', 'case');\r\n\r\n                                                foreach ($conditional_words as $word) {\r\n\r\n\r\n                                                    $numberOfParams = 0;\r\n\r\n\r\n                                                    if (preg_match('/if |if+\\((.*?)\\)+(.*?){|if+\\((.*?)\\)+(.*?) {/', $val) !== false) {\r\n\r\n                                                        $if_count = preg_match_all('/if |if+\\((.*?)\\)+(.*?){|if+\\((.*?)\\)+(.*?) {/', $val, $counter);\r\n                                                        $if_weight = $if_count * $weight_if_elseif;\r\n\r\n\r\n                                                        $insideBrackets = preg_match_all('/if \\((?<=\\().+(?=\\))\\)/', $val, $counter);\r\n                                                        $contentInsideBrackets = $counter;\r\n                                                        if (!$contentInsideBrackets == \"\") {\r\n                                                            foreach ($contentInsideBrackets as $contentInside) {\r\n                                                                if (!$contentInside == \"\") {\r\n                                                                    foreach ($contentInside as $content) {\r\n\r\n                                                                        //echo $content;\r\n                                                                        //echo \"<br>\";\r\n\r\n                                                                        $countInsideBrackets = preg_match_all('/&&|\\|\\|/', $content, $counter);\r\n\r\n\r\n                                                                        if ($countInsideBrackets > 0) {\r\n\r\n                                                                            $numberOfParams = $countInsideBrackets + 1;\r\n\r\n                                                                        } else {\r\n\r\n                                                                            $numberOfParams = 1;\r\n\r\n                                                                        }\r\n\r\n\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n\r\n\r\n                                                    }\r\n\r\n\r\n                                                    if (preg_match('/for |for+\\((.*?)\\)+(.*?){/', $val) !== false) {\r\n\r\n                                                        $for_count = preg_match_all('/for |for+\\((.*?)\\)+(.*?){/', $val, $counter);\r\n                                                        $for_weight = $for_count * $weight_for_while_dowhile;\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/while |while+\\((.*?)\\)+(.*?){/', $val) !== false) {\r\n\r\n                                                        $while_count = preg_match_all('/while |while+\\((.*?)\\)+(.*?){/', $val, $counter);\r\n                                                        $while_weight = $while_count * $weight_for_while_dowhile;\r\n\r\n\r\n                                                        $insideWhileBrackets = preg_match_all('/while |while+\\((.*?)\\)+(.*?){/', $val, $counter);\r\n                                                        $contentInsideWhileBrackets = $counter;\r\n                                                        if (!$contentInsideWhileBrackets == \"\") {\r\n                                                            foreach ($contentInsideWhileBrackets as $contentInside) {\r\n                                                                if (!$contentInside == \"\") {\r\n                                                                    foreach ($contentInside as $content) {\r\n\r\n                                                                        //echo $content;\r\n                                                                        //echo \"<br>\";\r\n\r\n                                                                        $countInsideWhileBrackets = preg_match_all('/&&|\\|\\|/', $content, $counter);\r\n\r\n\r\n                                                                        if ($countInsideWhileBrackets > 0) {\r\n\r\n                                                                            $numberOfWhileParams = $countInsideWhileBrackets + 1;\r\n\r\n                                                                        } else {\r\n\r\n                                                                            $numberOfWhileParams = 1;\r\n\r\n                                                                        }\r\n\r\n\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n\r\n\r\n                                                    }\r\n\r\n\r\n                                                    if (preg_match('/while |while+\\((.*?)\\)+(.*?);/', $val) !== false) {\r\n\r\n                                                        $do_while_count = preg_match_all('/while |while+\\((.*?)\\)+(.*?);/', $val, $counter);\r\n                                                        $do_while_weight = $do_while_count * $weight_for_while_dowhile;\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/switch |switch+\\((.*?)\\)+(.*?){/', $val) !== false) {\r\n\r\n                                                        $switch_count = preg_match_all('/switch |switch+\\((.*?)\\)+(.*?){/', $val, $counter);\r\n                                                        $switch_weight = $switch_count * $weight_switch;\r\n\r\n                                                    }\r\n\r\n                                                    if (preg_match('/case (.*?)+\\:/', $val) !== false) {\r\n\r\n                                                        $case_count = preg_match_all('/case (.*?)+\\:/', $val, $counter);\r\n                                                        $case_weight = $case_count * $weight_case;\r\n\r\n                                                    }\r\n\r\n\r\n                                                }\r\n\r\n                                                $Wtcs = $for_weight + $if_weight + $while_weight + $switch_weight + $case_weight + $do_while_weight;\r\n\r\n                                                $NC = $numberOfParams + $for_count + $numberOfWhileParams + $switch_count + $case_count + $do_while_count;\r\n\r\n\r\n                                                $Ccs = ($Wtcs * $NC);\r\n\r\n\r\n\r\n                                                if ($NC == 0) {\r\n\r\n                                                    $Ccspps = 0;\r\n\r\n                                                } else {\r\n\r\n                                                    $Ccspps = $Ccs;\r\n\r\n                                                }\r\n\r\n                                                if ($Wtcs == 0) {\r\n\r\n                                                    $NC = null;\r\n                                                    $Wtcs = null;\r\n                                                    $previousCCS = null;\r\n                                                    $currentCCS = 0;\r\n\r\n                                                }\r\n\r\n\r\n                                                if (stripos($val, $if_val) !== false || stripos($val, $switch_val) !== false || stripos($val, $for_val) !== false || stripos($val, $while_val) !== false) {\r\n\r\n                                                    if (sizeof($arrCCS) >= 1) {\r\n                                                        $var = $Ccs + $arrCCS[sizeof($arrCCS) - 1];\r\n                                                    } else {\r\n                                                        $var = $Ccs;\r\n                                                    }\r\n                                                    array_push($arrCCS, $var);\r\n\r\n                                                    if (!$inElse) {\r\n                                                        array_push($arr2, $var);\r\n                                                    }\r\n\r\n                                                    $currentCCS = $arrCCS[sizeof($arrCCS) - 1];\r\n\r\n                                                    if (sizeof($arrCCS) >= 2) {\r\n                                                        $previousCCS = $arrCCS[sizeof($arrCCS) - 2];\r\n                                                    }\r\n\r\n                                                }\r\n\r\n                                                if (sizeof($arrCCS) >= 2 && (stripos($val, $case_val) !== false)) {\r\n                                                    $previousCCS = $arrCCS[sizeof($arrCCS) - 1];\r\n                                                    $currentCCS = $Ccs + $arrCCS[sizeof($arrCCS) - 1];\r\n                                                }\r\n\r\n                                                if (stripos($val, $else_val) !== false) {\r\n                                                    $inElse = true;\r\n\r\n                                                }\r\n                                                if ((stripos($val, $if_val) !== false || stripos($val, $switch_val) !== false || stripos($val, $for_val) !== false || stripos($val, $while_val) !== false) && $inElse) {\r\n                                                    if (sizeof($elseArr) >= 1) {\r\n                                                        $var = $Ccs + $elseArr[sizeof($elseArr) - 1];\r\n                                                    } else {\r\n                                                        $var = $Ccs + $arr2[sizeof($arr2) - 1];\r\n                                                    }\r\n                                                    array_push($elseArr, $var);\r\n                                                }\r\n                                                if (sizeof($elseArr) >= 1 && stripos($val, $case_val) !== false && $inElse) {\r\n\r\n                                                    $previousCCS = $elseArr[sizeof($elseArr) - 1];\r\n                                                    $currentCCS = $Ccs + $elseArr[sizeof($elseArr) - 1];\r\n                                                }\r\n\r\n                                                if ($inElse && stripos($val, $switch_val) !== false) {\r\n                                                    $previousCCS = $arr2[sizeof($arr2) - 1];\r\n                                                    $currentCCS = $Ccs + $previousCCS;\r\n\r\n                                                    if (sizeof($arrCCS) >= 2 && (stripos($val, $case_val) !== false)) {\r\n                                                        $previousCCS = $arrCCS[sizeof($arrCCS) - 1];\r\n                                                        $currentCCS = $Ccs + $arrCCS[sizeof($arrCCS) - 1];\r\n                                                    }\r\n                                                }\r\n\r\n                                                $Cs = $Nkw + $Nid + $Nop + $Nnv + $Nsl;\r\n\r\n                                                $total_cs += $Cs;\r\n\r\n\r\n                                                $TCps = $Cs + $Cv + $Cm + $currentCCS;\r\n\r\n                                                $total_TCps += $TCps;\r\n\r\n                                                $total_ccs += $currentCCS;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                                ?>\r\n                                                <tr>\r\n                                                    <td><?php echo $count = $count + 1; ?></td>\r\n                                                    <td style=\"text-align: left\"><?php echo $val; ?></td>\r\n                                                    <td <?php if ($Cs > 0){ ?>style=\"color: #2c77f4; font-weight: bold; background-color: #e0e0e0\"<?php } ?>><?php echo $Cs; ?></td>\r\n                                                    <td <?php if ($Cv > 0){ ?>style=\"color: #2c77f4; font-weight: bold; background-color: #e0e0e0\"<?php } ?>><?php echo $Cv; ?></td>\r\n                                                    <td <?php if ($Cm > 0){ ?>style=\"color: #2c77f4; font-weight: bold; background-color: #e0e0e0\"<?php } ?>><?php echo $Cm; ?></td>\r\n                                                    <td>0</td>\r\n                                                    <td>0</td>\r\n                                                    <td <?php if ($currentCCS > 0){ ?>style=\"color: #2c77f4; font-weight: bold; background-color: #e0e0e0\"<?php } ?>><?php echo $currentCCS; ?></td>\r\n                                                    <td style=\"color: #2A3746;font-weight: bold;\"\r\n                                                        class=\"kt-label-bg-color-1\"><?php echo $TCps; ?></td>\r\n                                                    <?php $i++;\r\n\r\n                                                    if (stripos($val, $end_curlyBrace) !== false && $inElse && sizeof($elseArr) >= 1) {\r\n\r\n                                                        array_pop($elseArr);\r\n\r\n                                                        if (sizeof($elseArr) == 0) {\r\n\r\n                                                            $inElse = false;\r\n\r\n                                                        }\r\n\r\n                                                    }\r\n\r\n                                                    if (stripos($val, $end_curlyBrace) !== false) {\r\n\r\n                                                        if (!is_null($arrCCS)) {\r\n\r\n                                                            array_pop($arrCCS);\r\n\r\n                                                        }\r\n\r\n                                                    }\r\n\r\n                                                    }\r\n                                                    }}}}\r\n                                                    }\r\n                                                    $_SESSION['row_count'] = $i;\r\n                                                    ?>\r\n                                                </tr>\r\n\r\n\r\n                                                </tbody>\r\n                                                <tfoot>\r\n                                                <tr class=\"kt-label-bg-color-1\" style=\"font-family: 'Fira Code Medium'\">\r\n\r\n                                                    <th colspan=\"2\">Total</th>\r\n                                                    <th><?php echo $total_cs; ?></th>\r\n                                                    <th><?php echo $total_Cv; ?></th>\r\n                                                    <th><?php echo $total_Cm; ?></th>\r\n                                                    <th>0</th>\r\n                                                    <th>0</th>\r\n                                                    <th><?php echo $total_ccs; ?></th>\r\n                                                    <th style=\"font-weight: bold; font-size: x-large;\"\r\n                                                        class=\"bg-dark kt-font-brand\"><?php echo $total_TCps; ?></th>\r\n                                                </tr>\r\n                                                </tfoot>\r\n                                            </table>\r\n                                            <?php\r\n\r\n                                            $query_disp_total_comp = \"INSERT INTO totalcomplexity(totalcomplexityValue) VALUES('$total_TCps')\";\r\n                                            mysqli_query($con, $query_disp_total_comp);\r\n\r\n                                            ?>\r\n                                            <!--end: Datatable -->\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <!-- end:: Content -->\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                    <div class=\"kt-portlet__foot\">\r\n                        <div class=\"kt-form__actions\">\r\n                            <div class=\"row\">\r\n\r\n\r\n                                <div class=\"col-lg-12 ml-lg-auto\">\r\n                                    <center>\r\n\r\n                                        <button id=\"kt_sweetalert_demo_83\" type=\"button\" href=\"index.php\"\r\n                                                class=\"btn btn-dark\">Back\r\n                                        </button>\r\n                                    </center>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <!--end::Portlet-->\r\n\r\n\r\n            <?php }\r\n            }\r\n            }\r\n            }}\r\n            }\r\n            $query_disp_final_tot = \"INSERT INTO finaltotal(FinalTotalValue) VALUES('$final_total')\";\r\n            mysqli_query($con, $query_disp_final_tot);\r\n\r\n            ?>\r\n\r\n\r\n        </div>\r\n\r\n\r\n        <!--End::Row-->\r\n\r\n        <!--End::Dashboard 3-->\r\n    </div>\r\n    <!-- end:: Content -->\r\n</div>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- include/total_weight_content.php	(revision c6365f07a658f361c9f2c0deb40780062e97a16e)
+++ include/total_weight_content.php	(date 1589133255372)
@@ -52,6 +52,10 @@
     as $files_arr) {
 
 
+        shell_exec('php include/inheritance_total.php');
+
+
+
     $fi = new FilesystemIterator($storeFolder, FilesystemIterator::SKIP_DOTS);
     $limit = (iterator_count($fi));
 
Index: total_weight.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nif (!isset($_GET['reload'])) {\r\n    echo '<meta http-equiv=Refresh content=\"0;url=total_weight.php?reload=1\">';\r\n}\r\n\r\n?>\r\n\r\n<?php include 'include/header.php'; ?>\r\n<?php include 'include/aside.php'; ?>\r\n\r\n\r\n<?php\r\nfunction getContentsBetween($str, $startDelimiter, $endDelimiter)\r\n{\r\n    $contents = array();\r\n    $startDelimiterLength = strlen($startDelimiter);\r\n    $endDelimiterLength = strlen($endDelimiter);\r\n    $startFrom = $contentStart = $contentEnd = 0;\r\n    while (false !== ($contentStart = strpos($str, $startDelimiter, $startFrom))) {\r\n        $contentStart += $startDelimiterLength;\r\n        $contentEnd = strpos($str, $endDelimiter, $contentStart);\r\n        if (false === $contentEnd) {\r\n            break;\r\n        }\r\n        $contents[] = substr($str, $contentStart, $contentEnd - $contentStart);\r\n        $startFrom = $contentEnd + $endDelimiterLength;\r\n    }\r\n\r\n    return $contents;\r\n\r\n}\r\n\r\n?>\r\n\r\n\r\n<?php\r\n\r\n$ds = DIRECTORY_SEPARATOR;  // Store directory separator (DIRECTORY_SEPARATOR) to a simple variable. This is just a personal preference as we hate to type long variable name.\r\n$storeFolder = 'uploads';   // Declare a variable for destination folder.\r\n\r\n$tempFile = $_FILES['file']['tmp_name'];        // If file is sent to the page, store the file object to a temporary variable.\r\n$targetPath = __DIR__ . $ds . $storeFolder . $ds;  // Create the absolute path of the destination folder.\r\n\r\n$newFileName = $_FILES['file']['name'];\r\n$targetFile = $targetPath . $newFileName;  // Create the absolute path of the uploaded file destination.\r\nmove_uploaded_file($tempFile, $targetFile); // Move uploaded file to destination.\r\n\r\n// Include and initialize Extractor class (Zip file extracting)\r\nrequire 'Extractor.class.php';\r\n$extractor = new Extractor;\r\n\r\n// Path of archive file\r\n$archivePath = $targetFile;\r\n\r\n// Destination path\r\n$destPath = $storeFolder;\r\n\r\n// Extract archive file\r\n$extract = $extractor->extract($archivePath, $storeFolder);\r\n\r\n$dir_name = $storeFolder;\r\n$ext = 'zip';\r\n\r\nif ($extract) {\r\n    echo $GLOBALS['status']['success'];\r\n    unlink_recursive($dir_name, $ext);\r\n\r\n} else {\r\n    echo $GLOBALS['status']['error'];\r\n}\r\n\r\n\r\nif ($handle = opendir('uploads')) {\r\n\r\n    while (false !== ($entry = readdir($handle))) {\r\n        if ($entry != \".\" && $entry != \"..\") {\r\n\r\n            $entry_arr_af = preg_split(\"/\\.java/\", $entry);\r\n            $entry_arr = array_filter($entry_arr_af);\r\n\r\n\r\n\r\n            foreach ($entry_arr as $files) {\r\n\r\n                $content = file_get_contents('uploads/' . $entry);\r\n\r\n                //  Removes single line '//' comments, treats blank characters\r\n                $single = preg_replace('![ \\t]*//.*[ \\t]*[\\r\\n]!', '', $content);\r\n\r\n                $multiple = preg_replace('#/\\*[^*]*\\*+([^/][^*]*\\*+)*/#', '', $single);\r\n                $excess = preg_replace('/\\s+/', ' ', $multiple);\r\n                $trim = trim($excess, \" \");\r\n                //$for_semicolon = preg_replace('/;(?=((?!\\().)*?\\))/', ';', $trim);\r\n                $for_semicolon = preg_replace_callback(/** @lang text */ '~\\b(?:while|for)\\s*(\\((?:[^()]++|(?1))*\\))~u', static function ($m) {\r\n                    return str_replace(';', ';', $m[0]);\r\n                },\r\n                    $trim);\r\n                $split = preg_split('/(?<=[;{}])/', $for_semicolon, 0, PREG_SPLIT_NO_EMPTY);\r\n\r\n                $_SESSION['split_code'] = $split;\r\n                $_SESSION['files'] = $entry;\r\n                $_SESSION['trimmed'] = $trim;\r\n                $_SESSION['entireCode'] = $trim;\r\n                $_SESSION['filename'] = $entry;\r\n\r\n\r\n\r\n?>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <?php include 'include/total_weight_content.php'; ?>\r\n\r\n\r\n<?php\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n    closedir($handle);\r\n}\r\n\r\n?>\r\n\r\n\r\n<?php include 'include/footer.php'; ?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- total_weight.php	(revision c6365f07a658f361c9f2c0deb40780062e97a16e)
+++ total_weight.php	(date 1589128226832)
@@ -31,6 +31,89 @@
 
 }
 
+//function to sort the class_name using getBetween function
+function getBetween($codeLine, $start, $end)
+{
+    $codeLine = " " . $codeLine;
+    $ini = strpos($codeLine, $start);
+    if ($ini == 0)
+        return " ";
+    $ini += strlen($start);
+    $len = strpos($codeLine, $end, $ini) - $ini;
+    return substr($codeLine, $ini, $len);
+}
+
+//To sort out the classes
+class inheri
+{
+    public $name;
+    public $indirect;
+    public $superClass;
+
+    function __construct()
+    {
+        $this->name = "";
+        $this->indirect = 0;
+        $this->superClass = null;
+    }
+
+    function set_name($name)
+    {
+        $this->name = $name;
+    }
+
+    function set_indirect($indirect)
+    {
+        $this->indirect = $indirect;
+    }
+
+    function set_extends($var)
+    {
+        $this->superClass = $var;
+    }
+
+    function get_extends()
+    {
+        return $this->superClass;
+    }
+
+    function get_name()
+    {
+        return $this->name;
+    }
+
+    function get_direct()
+    {
+        if (is_string($this->superClass)) {
+            $ix = 1;
+        } else {
+            $ix = 0;
+        }
+        return $ix;
+    }
+
+    function get_indirect()
+    {
+        return $this->indirect;
+    }
+}
+
+//Function to find NIDI
+function findNidi($extend)
+{
+    global $classes;
+    global $cnt;
+    foreach ($classes as $key) {
+        if ($key->get_name() == $extend) {
+            $name1 = $key->get_extends();
+            if (!empty($name1)) {
+                $cnt++;
+                findNidi($name1);
+            }
+        }
+    }
+}
+
 ?>
 
 
diff --git include/size_content.php include/size_content.php
deleted file mode 100644
diff --git uploads/JumpingBox.java uploads/JumpingBox.java
